import sys
import csv
import os
import glob
import base64
import pandas as pd
import ctypes
import joblib

from winreg import *

import capstone
from disasm import *

import numpy as np
import matplotlib.pyplot as plt

from sklearn import svm, datasets
from sklearn.metrics import auc
from sklearn.metrics import plot_roc_curve
from sklearn.model_selection import StratifiedKFold

from feature_extractor import *
from const_container import *
from trainer import *
from validator import *
from dataset_loader import *

def init():
    max_int = sys.maxsize

    while True:
        # decrease the maxInt value by factor 10
        # as long as the OverflowError occurs.

        try:
            csv.field_size_limit(max_int)
            break
        except OverflowError:
            max_int = int(max_int / 10)


def load_graphs_from_directory(dataset_directory, limit_count):

    find_pattern = os.path.join(dataset_directory, "**", "*.graph.csv")
    file_paths = glob.glob(find_pattern, recursive=True)
    file_count = min(len(file_paths), limit_count)
    print("Total:", file_count)

    file_index = 1
    graphs = []
    for file_path in file_paths:

        if file_index > limit_count:
            break

        print(file_index, "/", file_count, file_path)

        graphs.append(DatasetLoader.load_graph(file_path))
        file_index += 1

    return graphs


def build_dataset_features(dataset_directory):

    print("Dataset directory:", dataset_directory)

    graphs = load_graphs_from_directory(dataset_directory)

    # FeatureExtractor.extract_pagerank(raw_graph, 256)
    # FeatureExtractor.extract_tf(graphs, 256, 1)
    FeatureExtractor.extract_tf_idf(graphs, 256, 1)

    pass


def train_dataset(feature_method, sequence_length):

    print("Training...")
    print("feature method:", feature_method)
    print("sequence length:", sequence_length)

    print("Load benign dataset:", BENIGN_DATASET_DIR)
    benign_graphs = load_graphs_from_directory(BENIGN_DATASET_DIR, TRY_BENIGN_FILE_COUNT_LIMIT)
    benign_features = FeatureExtractor.extract_feature(feature_method, benign_graphs, 256, sequence_length)

    print("Load malware dataset:", MALWARE_DATASET_DIR)
    malware_graphs = load_graphs_from_directory(MALWARE_DATASET_DIR, TRY_MALWARE_FILE_COUNT_LIMIT)
    malware_features = FeatureExtractor.extract_feature(feature_method, malware_graphs, 256, sequence_length)

    print("n benign:", len(benign_features))
    print("n malware:", len(malware_features))

    X = np.stack(benign_features + malware_features, axis=0)
    y = np.stack([0 for x in range(len(benign_features))] + [1 for x in range(len(malware_features))], axis=0)

    X_train, y_train, X_test, y_test = Trainer.init_train(X, y, False)

    # output
    classifiers = Trainer.get_classifiers()
    for classifier_name in classifiers:
        print(classifier_name)

        Trainer.train_k_fold(classifier_name, classifiers[classifier_name], X, y)
        #Trainer.train_report(classifier_name, classifiers[classifier_name], X_train, y_train, X_test, y_test)

    # init
    #X_train, y_train, X_test, y_test, X_train_pca, X_test_pca = Trainer.init_train(data, labels, False)

    # train
    #cross_predicts = Trainer.cross_train(X_train, y_train, X_test, X_train_pca, X_test_pca, MODELS_DIR)

    # score
    #validations = Validator.cross_validate_k_fold(cross_predicts, y_test)


    return

def test():
    #DisAssembler.extract_opcodes_from_pe("c:\\windows\\syswow64\\mspaint.exe")
    # lib = ctypes.windll.LoadLibrary("c:\\temp\\test.dll")
    # lib.EntryPoint()

    # user32Lib = ctypes.windll.LoadLibrary("user32.dll")
    #
    # str = ctypes.create_string_buffer(10)
    # str.
    #
    # user32Lib.MessageBoxA(0, ctypes.c_char("Hello"), 0, 0)

    # sub_key = r"SOFTWARE\MDS"
    # key_root = ConnectRegistry(None, HKEY_CURRENT_USER)
    # key = OpenKey(key_root, sub_key)
    #
    # value = QueryValue(key)

    # classifier = joblib.load(os.path.join(MODELS_DIR, "AdaBoost.xml"))
    # lib = ctypes.windll.LoadLibrary("c:\\temp\\Project2.dll")
    # file_name = "{223CDE67-DAF7-4984-9D37-876B9617D302}"
    #
    # lib.FileToGraphCsv(ctypes.c_char_p("c:\\temp\\Test\\chrome.exe".encode('utf-8')),
    #                    ctypes.c_char_p(file_name.encode('utf-8')))
    #
    # graphs = [DatasetLoader.load_graph(os.path.join(os.path.expandvars("%Temp%"), file_name))]
    # features = FeatureExtractor.extract_feature(TRAINING_FEATURE_METHOD, graphs, 256, 1)
    # predicts = classifier.predict(features)
    #
    # if all([int(p) == 0 for p in predicts]):
    #     print("Benign sample")
    # else:
    #     print("Malware sample")

    pass

if __name__ == '__main__':

    init()

    #test()

    #build_dataset_features("C:\\Temp\\AsmOut")
    train_dataset(TRAINING_FEATURE_METHOD, TRAINING_SEQUENCE_LENGTH)

    pass
