from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report
from sklearn.model_selection import *
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import Patch

from const_container import *


class Validator:

    @staticmethod
    def validate(y_predicts, y_test):

        print("Validating...")

        return classification_report(y_test, y_predicts)

    @staticmethod
    def cross_validate(cross_predicts, y_test):

        print("Cross validating...")

        reports = []
        for y_predicts in cross_predicts:
            reports.append(classification_report(y_test, y_predicts))

        return reports

    pass


    def plot_cv_indices(cv, X, y, group, ax):

        # Generate the training/testing visualizations for each CV split
        for ii, (tr, tt) in enumerate(cv.split(X=X, y=y, groups=group)):
            # Fill in indices with the training/test groups
            indices = np.array([np.nan] * len(X))
            indices[tt] = 1
            indices[tr] = 0

            # Visualize the results
            ax.scatter(range(len(indices)), [ii + .5] * len(indices),
                       c=indices, marker='_', lw=10, cmap=plt.cm.coolwarm,
                       vmin=-.2, vmax=1.2)

        # Plot the data classes and groups at the end
        ax.scatter(range(len(X)), [ii + 1.5] * len(X),
                   c=y, marker='_', lw=10, cmap=plt.cm.Paired)

        ax.scatter(range(len(X)), [ii + 2.5] * len(X),
                   c=group, marker='_', lw=10, cmap=plt.cm.Paired)

        # Formatting
        yticklabels = list(range(N_SPLITS)) + ['class', 'group']
        ax.set(yticks=np.arange(N_SPLITS + 2) + .5, yticklabels=yticklabels,
               xlabel='Sample index', ylabel="CV iteration",
               ylim=[N_SPLITS + 2.2, -.2], xlim=[0, 100])
        ax.set_title('{}'.format(type(cv).__name__), fontsize=15)
        return ax


    @staticmethod
    def cross_k_fold(cross_predicts, y_test):

        print("Cross K-Fold...")

        groups = np.hstack([[ii] * 10 for ii in range(10)])

        reports = []
        for y_predicts in cross_predicts:

            cvs = [KFold, GroupKFold, ShuffleSplit, StratifiedKFold,
                   GroupShuffleSplit, StratifiedShuffleSplit, TimeSeriesSplit]

            for cv in cvs:
                this_cv = cv(n_splits=N_SPLITS)
                fig, ax = plt.subplots(figsize=(6, 3))
                Validator.plot_cv_indices(this_cv, X, y, groups, ax)

                ax.legend([Patch(color=plt.cm.coolwarm(.8)),
                           Patch(color=plt.cm.coolwarm(.02))],
                          ['Testing set', 'Training set'],
                          loc=(1.02, .8))

                # Make the legend fit
                plt.tight_layout()
                fig.subplots_adjust(right=.7)
            plt.show()

    pass