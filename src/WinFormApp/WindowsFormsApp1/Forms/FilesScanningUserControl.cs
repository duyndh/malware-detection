using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsApp1.Controls;
using System.IO;
using System.Threading;
using WindowsFormsApp1.Controllers;
using static WindowsFormsApp1.Controls.MiningUserControl;
using static WindowsFormsApp1.Controllers.Storage;

namespace WindowsFormsApp1.UserControls
{
    public partial class FilesScanningUserControl : UserControl
    {
        public FilesScanningUserControl()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            this.typeComboBox.Items.Add(FileTypeEnum.FILES);
            this.typeComboBox.Items.Add(FileTypeEnum.DIRECTORIES);
            this.typeComboBox.SelectedIndex = 0;

            this.formatComboBox.Items.Add(FileFormatEnum.RAW);
            this.formatComboBox.Items.Add(FileFormatEnum.ASSEMBLY);
            this.formatComboBox.Items.Add(FileFormatEnum.STANDARD);
            this.formatComboBox.Items.Add(FileFormatEnum.GRAPH);
            this.formatComboBox.SelectedIndex = 0;
           
#if DEBUG

#endif
        }

        private void targetsButton_Click(object sender, EventArgs e)
        {
            if (this.typeComboBox.SelectedIndex == (int)FileTypeEnum.FILES)
            {
                using (var dialog = new OpenFileDialog())
                {
                    dialog.RestoreDirectory = true;
                    dialog.Multiselect = true;

                    var result = dialog.ShowDialog();

                    if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.FileName))
                    {
                        this.targetsRichTextBox.Text += string.Join(Environment.NewLine, dialog.FileNames) + Environment.NewLine;
                    }
                }
            }
            else
            {
                using (var dialog = new FolderBrowserDialog())
                {
                    var result = dialog.ShowDialog();

                    if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.SelectedPath))
                    {
                        this.targetsRichTextBox.Text += dialog.SelectedPath + Environment.NewLine;
                    }
                }
            }
        }

        private void historyDatagridview_Sorted(object sender, EventArgs e)
        {
            //var histories = Home.GetInstance().filesScanningControler.LoadHistory();

            //for (int iHistory = 0; iHistory < histories.Count; iHistory++)
            //{
            //    (int)(historyDataGridView.Rows[iHistory].Cells[0].Value) == 

            //    if (histories[iHistory].IsMalware)
            //        historyDataGridView.Rows[iHistory].DefaultCellStyle.ForeColor = Color.Red;
            //    else
            //        historyDataGridView.Rows[iHistory].DefaultCellStyle.ForeColor = Color.Green;
            //}

            //foreach (DataGridViewRow r in datagridview.Rows)
            //    r.DefaultCellStyle.BackColor = Color.FromArgb(220, 0, 0);
        }

        private void startButton_Click(object sender, EventArgs e)
        {            
            try
            {
                if (string.IsNullOrWhiteSpace(this.targetsRichTextBox.Text))
                    throw new Exception("Empty targets");

                var targetPaths = this.targetsRichTextBox.Text.Split('\n')
                    .Select(path => path.Trim())
                    .Where(path => !string.IsNullOrWhiteSpace(path))
                    .Select(path =>
                    {
                        if (!File.Exists(path))
                            throw new Exception("Not found: " + path);

                        return path;
                    })
                    .ToArray();
                if (targetPaths.Length == 0)
                    throw new Exception("Empty targets");

                // Start
                {
                    var targetType = (FileTypeEnum)this.typeComboBox.SelectedItem;
                    var targetFormat = (FileFormatEnum)this.formatComboBox.SelectedItem;

                    var thread = new Thread(() => Home.GetInstance().filesScanningControler.Start(targetType, targetFormat, targetPaths), Storage.MAX_STACK_SIZE);
                    thread.Start();
                }                
            }
            catch (Exception ex)
            {             
                MessageBox.Show("Exception: " + ex.Message);
            }            
        }

        private void refreshButton_Click(object sender, EventArgs e)
        {
            var controller = Home.GetInstance().filesScanningControler;
            controller.BindHitoryToView(controller.LoadHistory());
        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            var emptyHistories = new List<FileHistoryRecord>();
            var controller = Home.GetInstance().filesScanningControler;

            controller.SaveHistory(emptyHistories);
            controller.BindHitoryToView(emptyHistories);
        }
    }
}
