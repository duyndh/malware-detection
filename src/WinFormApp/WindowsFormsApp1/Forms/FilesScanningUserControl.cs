using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsApp1.Controls;
using System.IO;
using System.Threading;
using WindowsFormsApp1.Controllers;
using static WindowsFormsApp1.Controls.MiningUserControl;
using static WindowsFormsApp1.Controllers.Storage;

namespace WindowsFormsApp1.UserControls
{
    public partial class FilesScanningUserControl : UserControl
    {
        public FilesScanningUserControl()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            this.typeComboBox.Items.Add(FileTypeEnum.Files);
            this.typeComboBox.Items.Add(FileTypeEnum.Directories);
            this.typeComboBox.SelectedIndex = 0;

            this.formatComboBox.Items.Add(FileFormatEnum.Raw);
            this.formatComboBox.Items.Add(FileFormatEnum.Assembly);
            this.formatComboBox.Items.Add(FileFormatEnum.Standard);
            this.formatComboBox.Items.Add(FileFormatEnum.Graph);
            this.formatComboBox.SelectedIndex = 0;

#if DEBUG

#endif
        }


        private void targetsButton_Click(object sender, EventArgs e)
        {
            if (this.typeComboBox.SelectedIndex == (int)FileTypeEnum.Files)
            {
                using (var dialog = new OpenFileDialog())
                {
                    dialog.RestoreDirectory = true;
                    dialog.Multiselect = true;

                    DialogResult result = dialog.ShowDialog();

                    if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.FileName))
                    {
                        this.targetsTextBox.Text = string.Join(";", dialog.FileNames);
                    }
                }
            }
            else
            {

            }
        }

        private void startButton_Click(object sender, EventArgs e)
        {
            Wrapper.SetButtonState(this.startButton, false);
            Wrapper.SetProgressBar(this.progressBar, 0);

            try
            {
                if (string.IsNullOrWhiteSpace(this.targetsTextBox.Text))
                    throw new Exception("Empty targets");

                var targetPaths = this.targetsTextBox.Text.Split(';')
                    .Select(targetPath => 
                    {
                        var path = targetPath.Trim();
                        if (!File.Exists(path))
                            throw new Exception("Not found: " + path);

                        return path;
                    }).ToArray();
                if (targetPaths.Length == 0)
                    throw new Exception("Empty targets");

                // Start
                {
                    var targetType = (FileTypeEnum)this.typeComboBox.SelectedItem;
                    var targetFormat = (FileFormatEnum)this.formatComboBox.SelectedItem;

                    var thread = new Thread(() => Home.GetInstance().filesScanningControler.Start(targetType, targetFormat, targetPaths), Storage.MAX_STACK_SIZE);
                    thread.Start();
                }                
            }
            catch (Exception ex)
            {
                Wrapper.SetButtonState(this.startButton, true);
                Wrapper.SetProgressBar(this.progressBar, 100);

                MessageBox.Show("Exception: " + ex.Message);
            }
        }
    }
}
