using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsApp1.Controls;
using System.IO;
using System.Threading;
using WindowsFormsApp1.Controllers;
using System.Diagnostics;
using static WindowsFormsApp1.Controllers.Storage;

namespace WindowsFormsApp1.UserControls
{
    public partial class TrainingUserControl : UserControl
    {
        public TrainingUserControl()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            // Benign formats
            this.benignFormatComboBox.Items.Add(FileFormatEnum.GRAPH);
            this.benignFormatComboBox.SelectedIndex = 0;

            // Malware format
            this.malwareFormatComboBox.Items.Add(FileFormatEnum.GRAPH);
            this.malwareFormatComboBox.SelectedIndex = 0;

            // Feature
            for (int iFeature = 0; iFeature < (int)FeatureEnum.Count; iFeature++)
                this.featureComboBox.Items.Add((FeatureEnum)iFeature);
            this.featureComboBox.SelectedIndex = 0;

            // Feature length
            for (int iFeatureLength = 0; iFeatureLength < (int)SequenceLengthEnum.COUNT; iFeatureLength++)
                this.sequenceLengthComboBox.Items.Add((SequenceLengthEnum)iFeatureLength);
            this.sequenceLengthComboBox.SelectedIndex = 0;

            // Feature type
            for (int iFeatureType = 0; iFeatureType < (int)SequenceTypeEnum.COUNT; iFeatureType++)
                this.sequenceTypeComboBox.Items.Add((SequenceTypeEnum)iFeatureType);
            this.sequenceTypeComboBox.SelectedIndex = 0;

            // Test ratio
            for (int iRatio = 0; iRatio < (int)TestRatioEnum.COUNT; iRatio++)
                this.testRatioComboBox.Items.Add((TestRatioEnum)iRatio);
            this.testRatioComboBox.SelectedIndex = 0;

            // Classifiers
            for (int iClassifier = 0; iClassifier < (int)ClassifierEnum.COUNT; iClassifier++)
                this.classifiersCheckedListBox.Items.Add((ClassifierEnum)iClassifier);            
            
            this.benignCountLimitNumericUpDown.Maximum = UInt32.MaxValue;
            this.benignCountLimitNumericUpDown.Minimum = 0;
            this.malwareCountLimitNumericUpDown.Maximum = UInt32.MaxValue;
            this.malwareCountLimitNumericUpDown.Minimum = 0;
            this.reduceDimensionNumericUpDown.Maximum = UInt32.MaxValue;
            this.reduceDimensionNumericUpDown.Minimum = 0;

#if DEBUG
            this.benignLocationsRichTextBox.Text = @"C:\X";
            this.malwareLocationsRichTextBox.Text = @"C:\Y\Y";

            this.benignCountLimitNumericUpDown.Value = 50;
            this.malwareCountLimitNumericUpDown.Value = 50;

            this.sequenceTypeComboBox.SelectedIndex = 0;
            //this.featureLengthNumericUpDown.Value = 1;
            this.reduceDimensionNumericUpDown.Value = 64;

            for (int index = 0; index < this.classifiersCheckedListBox.Items.Count; index++)
                classifiersCheckedListBox.SetItemChecked(index, true);
#endif
        }

        private void benignLocationButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                dialog.ShowNewFolderButton = true;
                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.SelectedPath))
                {
                    this.benignLocationsRichTextBox.Text += Environment.NewLine;
                    this.benignLocationsRichTextBox.Text += dialog.SelectedPath;
                }
            }
        }

        private void malwareLocationButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.SelectedPath))
                    this.malwareLocationsRichTextBox.Text += Environment.NewLine + dialog.SelectedPath;
            }
        }

        private void startButton_Click(object sender, EventArgs e)
        {
            try
            {               
                // Benign
                if (string.IsNullOrEmpty(this.benignLocationsRichTextBox.Text))
                    throw new Exception("Empty benign locations");
                var benignDirs = this.benignLocationsRichTextBox.Text.Split('\n')
                  .Select(path => path.Trim())
                  .Where(path => !string.IsNullOrWhiteSpace(path))
                  .Select(path =>
                  {
                      if (!Directory.Exists(path))
                          throw new Exception("Not found: " + path);

                      return path;
                  })
                  .ToArray();
                if (benignDirs.Length == 0)
                    throw new Exception("Empty benign locations");

                // Malware
                if (string.IsNullOrEmpty(this.malwareLocationsRichTextBox.Text))
                    throw new Exception("Empty malware locations");
                var malwareDirs = this.malwareLocationsRichTextBox.Text.Split('\n')
                  .Select(path => path.Trim())
                  .Where(path => !string.IsNullOrWhiteSpace(path))
                  .Select(path =>
                  {
                      if (!Directory.Exists(path))
                          throw new Exception("Not found: " + path);

                      return path;
                  })
                  .ToArray();
                if (malwareDirs.Length == 0)
                    throw new Exception("Empty malware locations");

                var classifiers = this.classifiersCheckedListBox.CheckedIndices.Cast<int>().ToArray();
                if (classifiers.Length == 0)
                    throw new Exception("Empty classifiers");


                // Start
                {
                    //var rootDir = Wrapper.GetRootDir();

                    var featureIndex = (int)this.featureComboBox.SelectedItem;
                    var sequenceLength = (int)this.sequenceLengthComboBox.SelectedItem + 1;
                    var testRatio = (float)(((int)this.testRatioComboBox.SelectedItem + 1) / 10.0);
                    var reducedSize = (int)this.reduceDimensionNumericUpDown.Value;
                    var benignLimitCount = (int)this.benignCountLimitNumericUpDown.Value;
                    var malwareLimitCount = (int)this.malwareCountLimitNumericUpDown.Value;

                    var thread = new Thread(() => Home.GetInstance().trainingController.Start(
                        featureIndex,
                        sequenceLength,
                        testRatio,
                        reducedSize,
                        benignDirs,
                        benignLimitCount,
                        malwareDirs,
                        malwareLimitCount,
                        classifiers
                        ), Storage.MAX_STACK_SIZE);
                    thread.Start();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Exception: " + ex.Message);
            }
        }

        private void resultButton_Click(object sender, EventArgs e)
        {
            using (var process = Process.Start(OUTPUT_DIR)) { }
        }

        private void feature_SelectedValueChanged(object sender, EventArgs e)
        {
            this.sequenceLengthComboBox.Items.Clear();
            if ((FeatureEnum)this.featureComboBox.SelectedItem == FeatureEnum.TF)
            {
                this.sequenceLengthComboBox.Items.Add(SequenceLengthEnum.G1);
                this.sequenceLengthComboBox.Items.Add(SequenceLengthEnum.G2);
            }
            else if ((FeatureEnum)this.featureComboBox.SelectedItem == FeatureEnum.TF_IDF)
            {
                this.sequenceLengthComboBox.Items.Add(SequenceLengthEnum.G1);
                this.sequenceLengthComboBox.Items.Add(SequenceLengthEnum.G2);
            }
            else
            {
                this.sequenceLengthComboBox.Items.Add(SequenceLengthEnum.G2);
            }
            this.sequenceLengthComboBox.SelectedIndex = 0;
        }

        private void sequenceLength_SelectedValueChanged(object sender, EventArgs e)
        {
            this.sequenceTypeComboBox.Items.Clear();
            if ((SequenceLengthEnum)this.sequenceLengthComboBox.SelectedItem == SequenceLengthEnum.G1)
            {
                this.sequenceTypeComboBox.Items.Add(SequenceTypeEnum.LINEAR);
            }
            else
            {
                this.sequenceTypeComboBox.Items.Add(SequenceTypeEnum.LINEAR);
                this.sequenceTypeComboBox.Items.Add(SequenceTypeEnum.GRAPH);
            }
            this.sequenceTypeComboBox.SelectedIndex = 0;
        }
    }
}
