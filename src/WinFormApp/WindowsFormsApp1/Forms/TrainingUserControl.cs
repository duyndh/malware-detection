using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsApp1.Controls;
using System.IO;
using System.Threading;
using WindowsFormsApp1.Controllers;
using System.Diagnostics;

namespace WindowsFormsApp1.UserControls
{
    public partial class TrainingUserControl : UserControl
    {
        public TrainingUserControl()
        {
            InitializeComponent();
        }

        public enum FeatureType
        {
            TF,
            TF_IDF,
            PR
        }

        private readonly string[] FEATURE_VALUES = new string[]
        {
            "Term frequency",
            "Term Frequency–Inverse Document Frequency",
            "Page Rank"
        };

        private readonly string[] FEATURE_TYPE_VALUES = new string[]
        {
            "Linear",
            "Graph"
        };

        private readonly string[] CLASSIFIER_TYPE_VALUES = new string[]
        {
            "KNN",
            "Linear SVM",
            "RBF SVM",
            "Linear Regression",
            "Logistic Regression",
            "Multi-layer Perceptron",
            "Naive Bayes",
            "LDA",
            "QDA",
            "Decision Tree",
            "Random Forest",
            "Extra Trees",
            "AdaBoost",
            "Gradient Boosting"
        };

        private readonly string[] TEST_RATIO_STRINGS = new string[]
        {
            "10%",
            "20%",
            "30%",
            "40%",
            "50%",
            "60%",
            "70%",
            "80%",
            "90%"
        };
        private readonly float[] TEST_RATIO_VALUES = new float[]
        {
            0.1f,
            0.2f,
            0.3f,
            0.4f,
            0.5f,
            0.6f,
            0.7f,
            0.8f,
            0.9f
        };

        protected override void OnLoad(EventArgs e)
        {
            // Benign formats
            this.benignFormatComboBox.Items.Add(MiningUserControl.DATA_FORMAT_VALUES[(int)MiningUserControl.DataFormatEnum.Graph]);
            this.benignFormatComboBox.SelectedIndex = 0;

            // Malware format
            this.malwareFormatComboBox.Items.Add(MiningUserControl.DATA_FORMAT_VALUES[(int)MiningUserControl.DataFormatEnum.Graph]);
            this.malwareFormatComboBox.SelectedIndex = 0;

            // Feature
            for (int iFeature = 0; iFeature < FEATURE_VALUES.Length; iFeature++)
                this.featureComboBox.Items.Add(FEATURE_VALUES[iFeature]);
            this.featureComboBox.SelectedIndex = 0;

            // Feature type
            for (int iType = 0; iType < FEATURE_TYPE_VALUES.Length; iType++)
                this.featureTypeComboBox.Items.Add(FEATURE_TYPE_VALUES[iType]);
            this.featureTypeComboBox.SelectedIndex = 0;

            // Test ratio
            for (int iRatio = 0; iRatio < TEST_RATIO_STRINGS.Length; iRatio++)
                this.testRatioComboBox.Items.Add(TEST_RATIO_STRINGS[iRatio]);
            this.testRatioComboBox.SelectedIndex = 1;

            // Classifiers
            for (int iClassifier = 0; iClassifier < CLASSIFIER_TYPE_VALUES.Length; iClassifier++)
                this.classifiersCheckedListBox.Items.Add(CLASSIFIER_TYPE_VALUES[iClassifier]);
            
            this.benignCountLimitNumericUpDown.Maximum = UInt32.MaxValue;
            this.benignCountLimitNumericUpDown.Minimum = 0;
            this.malwareCountLimitNumericUpDown.Maximum = UInt32.MaxValue;
            this.malwareCountLimitNumericUpDown.Minimum = 0;
            this.featureLengthNumericUpDown.Maximum = UInt32.MaxValue;
            this.featureLengthNumericUpDown.Minimum = 0;
            this.reduceDimensionNumericUpDown.Maximum = UInt32.MaxValue;
            this.reduceDimensionNumericUpDown.Minimum = 0;

#if DEBUG
            this.benignLocationsRichTextBox.Text = @"C:\X\X";
            this.malwareLocationsRichTextBox.Text = @"C:\Y\Y";

            this.benignCountLimitNumericUpDown.Value = 10;
            this.malwareCountLimitNumericUpDown.Value = 20;

            this.featureTypeComboBox.SelectedIndex = 1;
            this.featureLengthNumericUpDown.Value = 1;
            this.reduceDimensionNumericUpDown.Value = 1024;

            for (int index = 0; index < this.classifiersCheckedListBox.Items.Count; index++)
            {
                classifiersCheckedListBox.SetItemChecked(index, true);
            }

            this.saveButton.Visible = false;
            //this.outputRichTextBox.Visible = false;
            //this.clearButton.Visible = false;
#endif
        }

        public void WriteToOutputRichTextBoxContent(string content)
        {
            this.outputRichTextBox.Invoke((MethodInvoker)delegate
            {
                this.outputRichTextBox.Text += content;
                this.outputRichTextBox.Text += Environment.NewLine;
            });
        }
        public void ClearOutputRichTextBoxContent()
        {
            this.outputRichTextBox.Invoke((MethodInvoker)delegate
            {
                this.outputRichTextBox.Clear();
            });
        }

        public void SetStartButtonState(bool enable)
        {
            this.startButton.Invoke((MethodInvoker)delegate
            {
                this.startButton.Enabled = enable;
            });
        }

        public void SetStartProgressBar(int percentage)
        {
            this.startProgressBar.Invoke((MethodInvoker)delegate
            {
                this.startProgressBar.Value = (int)(percentage * this.startProgressBar.Maximum / 100);
            });
        }

        private void benignLocationButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                dialog.ShowNewFolderButton = true;
                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.SelectedPath))
                {
                    this.benignLocationsRichTextBox.Text += Environment.NewLine;
                    this.benignLocationsRichTextBox.Text += dialog.SelectedPath;
                }
            }
        }

        private void malwareLocationButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.SelectedPath))
                    this.malwareLocationsRichTextBox.Text += Environment.NewLine + dialog.SelectedPath;
            }
        }

        private void startButton_Click(object sender, EventArgs e)
        {
            try
            {
                SetStartButtonState(false);
                SetStartProgressBar(0);

                // Benign
                var benignDirs = this.benignLocationsRichTextBox.Text.Split(new string[] { "\n" }, StringSplitOptions.RemoveEmptyEntries)
                    .Select(x => x.Trim().ToLower()).Where(x => x.Length > 0).ToArray();
                benignDirs = benignDirs.Where(x => benignDirs.Count(y => y == x) == 1).ToArray();

                foreach (var dir in benignDirs)
                {
                    if (!Directory.Exists(dir))
                        throw new Exception(string.Format("Not found: Benign location {0}", dir));
                }
                if (!MiningUserControl.DATA_FORMAT_VALUES.Contains(this.benignFormatComboBox.SelectedItem))
                    throw new Exception("Invalid: Benign data format");

                // Malware
                var malwareDirs = this.malwareLocationsRichTextBox.Text.Split(new string[] { "\n" }, StringSplitOptions.RemoveEmptyEntries)
                    .Select(x => x.Trim().ToLower()).Where(x => x.Length > 0).ToArray();
                malwareDirs = malwareDirs.Where(x => malwareDirs.Count(y => y == x) == 1).ToArray();

                foreach (var dir in malwareDirs)
                {
                    if (!Directory.Exists(dir))
                        throw new Exception(string.Format("Not found: Malware location", dir));
                }
                if (!MiningUserControl.DATA_FORMAT_VALUES.Contains(this.malwareFormatComboBox.SelectedItem))
                    throw new Exception("Invalid: Malware data format");

                // Extract
                if (!FEATURE_VALUES.Contains(this.featureComboBox.SelectedItem))
                    throw new Exception("Invalid: Feature");

                if (!FEATURE_TYPE_VALUES.Contains(this.featureTypeComboBox.SelectedItem))
                    throw new Exception("Invalid: Feature type");

                if (!TEST_RATIO_STRINGS.Contains(this.testRatioComboBox.SelectedItem))
                    throw new Exception("Invalid: Test ratio");

                // Start
                {
                    var rootDir = Wrapper.GetRootDir();

                    var featureIndex = this.featureComboBox.SelectedIndex;
                    var sequenceLength = (int)this.featureLengthNumericUpDown.Value;
                    var testRatio = TEST_RATIO_VALUES[(int)this.testRatioComboBox.SelectedIndex];
                    var reducedSize = (int)this.reduceDimensionNumericUpDown.Value;
                    var benignLimitCount = (int)this.benignCountLimitNumericUpDown.Value;
                    var malwareLimitCount = (int)this.malwareCountLimitNumericUpDown.Value;
                    var guid = Guid.NewGuid().ToString();
                    var logFilePath = Path.Combine(rootDir, "Output", guid + ".txt");
                    var modelFilePath = Path.Combine(rootDir, "Output", guid + ".mdl");

                    var checkedClasssifierIndexs = this.classifiersCheckedListBox.CheckedIndices.Cast<int>().ToArray();
                    if (checkedClasssifierIndexs.Length == 0)
                        throw new Exception("Invalid: Classifier");

                    var thread = new Thread(() => Home.GetInstance().GetTrainingController().StartTraining(
                        featureIndex,
                        sequenceLength,
                        testRatio,
                        reducedSize,
                        benignDirs,
                        benignLimitCount,
                        malwareDirs,
                        malwareLimitCount,
                        checkedClasssifierIndexs,
                        logFilePath,
                        modelFilePath
                        ), Wrapper.MAX_STACK_SIZE);
                    thread.Start();
                }
            }
            catch (Exception ex)
            {
                SetStartProgressBar(100);

                MessageBox.Show(ex.Message);
                SetStartButtonState(true);
            }
        }

        private void resultButton_Click(object sender, EventArgs e)
        {
            var roorDir = Wrapper.GetRootDir();
            using (var process = Process.Start(Path.Combine(roorDir, "Output"))) {}
        }

        private void saveButton_Click(object sender, EventArgs e)
        {

        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            this.outputRichTextBox.Text = string.Empty;
        }
    }
}
