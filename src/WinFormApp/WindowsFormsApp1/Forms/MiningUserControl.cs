using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using WindowsFormsApp1.Controllers;
using System.Threading;
using System.Collections;
using static WindowsFormsApp1.Controllers.Storage;

namespace WindowsFormsApp1.Controls
{
    public partial class MiningUserControl : UserControl
    {
        public MiningUserControl()
        {
            InitializeComponent();
        }

        
        protected override void OnLoad(EventArgs e)
        {
            for (int iFormat = 0; iFormat < (int)FileFormatEnum.COUNT - 1; iFormat++)
                this.srcFormatComboBox.Items.Add((FileFormatEnum)iFormat);
            this.srcFormatComboBox.SelectedIndex = 0;

            this.countLimitNumericUpDown.Maximum = Int32.MaxValue;
            this.countLimitNumericUpDown.Minimum = 0;

#if DEBUG
            this.srcLocationTextBox.Text = @"C:\Temp\in";
            this.dstLocationTextBox.Text = @"c:\temp\out";

            this.countLimitNumericUpDown.Value = Int32.MaxValue;
            this.srcFormatComboBox.SelectedIndex = 0;
            this.dstFormatComboBox.SelectedIndex = 1;
            this.onlyPeExtCheckBox.Checked = false;
#endif
        }

        public void SetStartButtonState(bool enable)
        {
            this.startButton.Invoke((MethodInvoker)delegate
            {
                this.startButton.Enabled = enable;
            });
        }

        public void SetStartProgressBar(int percentage)
        {
            this.startProgressBar.Invoke((MethodInvoker)delegate
            {
                this.startProgressBar.Value = (int)(percentage * this.startProgressBar.Maximum / 100);
            });
        }

        private void startButton_Click(object sender, EventArgs e)
        {
            try
            {
                SetStartButtonState(false);
                SetStartProgressBar(0);

                if (!Directory.Exists(this.srcLocationTextBox.Text))
                    throw new Exception("Not found: Source location");

                if (!Directory.Exists(this.dstLocationTextBox.Text))
                    throw new Exception("Not found: Destination location");

                
                // Start
                {
                    var srcLocation = this.srcLocationTextBox.Text;
                    var srcFormat = (FileFormatEnum)this.srcFormatComboBox.SelectedItem;
                    var dstLocation = this.dstLocationTextBox.Text;
                    var dstFormat = (FileFormatEnum)this.dstFormatComboBox.SelectedItem;
                    var limitCount = (int)this.countLimitNumericUpDown.Value;
                    var onlyPeExts = this.onlyPeExtCheckBox.Checked;

                    var thread = new Thread(() => Home.GetInstance().miningController.Start(srcLocation, srcFormat, dstLocation, dstFormat, limitCount, onlyPeExts), Storage.MAX_STACK_SIZE);
                    thread.Start();
                }

            } catch (Exception ex)
            {
                SetStartProgressBar(100);

                MessageBox.Show(ex.Message);
                SetStartButtonState(true);
            }
        }

        private void selectSrcLocationButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.SelectedPath))
                    this.srcLocationTextBox.Text = dialog.SelectedPath;
            }
        }

        private void selectDstLocationButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.SelectedPath))
                    this.dstLocationTextBox.Text = dialog.SelectedPath;
            }
        }

        private void srcFormat_SelectedValueChanged(object sender, EventArgs e)
        {
            this.dstFormatComboBox.Items.Clear();
            var srcFormat = this.srcFormatComboBox.SelectedItem;
            foreach (var dstFormat in DATA_FORMAT_DIRECTIONS[(int)srcFormat])
                this.dstFormatComboBox.Items.Add(dstFormat);
            this.dstFormatComboBox.SelectedIndex = 0;
        }
    }
}
