using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using Newtonsoft.Json;
using static WindowsFormsApp1.Controllers.Storage;

namespace WindowsFormsApp1.UserControls
{
    public partial class SettingUserControl : UserControl
    {
        public SettingUserControl()
        {
            InitializeComponent();
        }
       
        protected override void OnLoad(EventArgs e)
        {
            var appConfigPath = Path.Combine(Home.GetInstance().GetDataLocation(), APP_SETTINGS_FILE_NAME);

            AppSettings settings = new AppSettings();

            // Load config
            if (File.Exists(appConfigPath))
            {
                settings = JsonConvert.DeserializeObject<AppSettings>(File.ReadAllText(appConfigPath));
            }

            // Modify
            this.sclTextBox.Text = settings.DataScalerPath;
            this.dcpTextBox.Text = settings.DataDecompositionPath;
            this.clfTextBox.Text = settings.ClassifierPath;
            this.extTextBox.Text = settings.ExtraDataPath;
            this.cfgTextBox.Text = settings.ConfigPath;

#if DEBUG
            //this.sclTextBox.Text = @"C:\Temp\Output\Model\data.scl";
            //this.dcpTextBox.Text = @"C:\Temp\Output\Model\data.dcp";
            //this.extTextBox.Text = @"C:\Temp\Output\Model\data.ext";
            //this.clfTextBox.Text = @"C:\Temp\Output\Model\1_SVM.clf";
            //this.cfgTextBox.Text = @"C:\Temp\Output\Model\config.cfg";
#endif
        }

        public void SetSaveButtonState(bool enable)
        {
            this.saveButton.Invoke((MethodInvoker)delegate
            {
                this.saveButton.Enabled = enable;
            });
        }

        private void saveButton_Click(object sender, EventArgs e)
        {
            try
            {
                SetSaveButtonState(false);

                if (!File.Exists(this.sclTextBox.Text))
                    throw new Exception("Not found: Data scaler");

                if (!File.Exists(this.dcpTextBox.Text))
                    throw new Exception("Not found: Data decomposion");

                if (!File.Exists(this.clfTextBox.Text))
                    throw new Exception("Not found: Classifier");

                if (!File.Exists(this.extTextBox.Text))
                    throw new Exception("Not found: Extra data");

                if (!File.Exists(this.cfgTextBox.Text))
                    throw new Exception("Not found: Config");

                var appConfigPath = Path.Combine(Home.GetInstance().GetDataLocation(), APP_SETTINGS_FILE_NAME);

                AppSettings settings = new AppSettings();

                // Load config
                if (File.Exists(appConfigPath))
                {
                    settings = JsonConvert.DeserializeObject<AppSettings>(File.ReadAllText(appConfigPath));
                }

                // Modify
                settings.DataScalerPath = this.sclTextBox.Text;
                settings.DataDecompositionPath = this.dcpTextBox.Text;
                settings.ClassifierPath = this.clfTextBox.Text;
                settings.ExtraDataPath = this.extTextBox.Text;
                settings.ConfigPath = this.cfgTextBox.Text;

                // Save
                File.WriteAllText(appConfigPath, JsonConvert.SerializeObject(settings));

                MessageBox.Show("Saved");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            SetSaveButtonState(true);
        }

        private void sclButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new OpenFileDialog())
            {
                dialog.Filter = "scl files (*.scl)|*.scl|All files (*.*)|*.*";
                dialog.FilterIndex = 1;
                dialog.RestoreDirectory = true;

                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.FileName))
                    this.sclTextBox.Text = dialog.FileName;
            }
        }

        private void dcpButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new OpenFileDialog())
            {
                dialog.Filter = "dcp files (*.dcp)|*.dcp|All files (*.*)|*.*";
                dialog.FilterIndex = 1;
                dialog.RestoreDirectory = true;

                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.FileName))
                    this.dcpTextBox.Text = dialog.FileName;
            }
        }

        private void clfButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new OpenFileDialog())
            {
                dialog.Filter = "clf files (*.clf)|*.clf|All files (*.*)|*.*";
                dialog.FilterIndex = 1;
                dialog.RestoreDirectory = true;

                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.FileName))
                    this.clfTextBox.Text = dialog.FileName;
            }
        }

        private void extButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new OpenFileDialog())
            {
                dialog.Filter = "ext files (*.ext)|*.ext|All files (*.*)|*.*";
                dialog.FilterIndex = 1;
                dialog.RestoreDirectory = true;

                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.FileName))
                    this.extTextBox.Text = dialog.FileName;
            }
        }

        private void cfgButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new OpenFileDialog())
            {
                dialog.Filter = "cfg files (*.cfg)|*.cfg|All files (*.*)|*.*";
                dialog.FilterIndex = 1;
                dialog.RestoreDirectory = true;

                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.FileName))
                    this.cfgTextBox.Text = dialog.FileName;
            }
        }
    }
}
