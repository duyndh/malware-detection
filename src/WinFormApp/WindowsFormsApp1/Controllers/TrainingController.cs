using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsApp1.UserControls;
using static WindowsFormsApp1.Home;
using static WindowsFormsApp1.Controllers.Storage;

namespace WindowsFormsApp1.Controllers
{
    public class TrainingController
    {
        TrainingUserControl _userControl = null;
        public TrainingController(TrainingUserControl userControl)
        {
            _userControl = userControl; 
        }

        public bool Start(int featureIndex, int sequenceLength, float testRatio, int reducedSize, string[] benignDirs, int benignLimitCount, string[] malwareDirs, int malwareLimitCount, int[] classifierIndexs)
        {
            Wrapper.SetButtonState(this._userControl.startButton, false);
            Wrapper.SetProgressBar(this._userControl.progressBar, 0, false);
                        
            bool hasError = false;
            var output = string.Empty;
            try
            {
                Environment.SetEnvironmentVariable(MODE_ID_ENV_NAME, ((int)ModeEnum.TRAIN).ToString());
                Environment.SetEnvironmentVariable(OUTPUT_DIR_ENV_NAME, OUTPUT_DIR);

                Environment.SetEnvironmentVariable(BENIGN_DIRS_ENV_NAME, string.Join(";", benignDirs));
                Environment.SetEnvironmentVariable(BENIGN_LIMIT_ENV_NAME, benignLimitCount.ToString());
                Environment.SetEnvironmentVariable(MALWARE_DIRS_ENV_NAME, string.Join(";", malwareDirs));
                Environment.SetEnvironmentVariable(MALWARE_LIMIT_ENV_NAME, malwareLimitCount.ToString());

                Environment.SetEnvironmentVariable(FEATURE_ID_ENV_NAME, featureIndex.ToString());
                Environment.SetEnvironmentVariable(SEQUENCE_LEN_ENV_NAME, sequenceLength.ToString());
                Environment.SetEnvironmentVariable(TEST_RATIO_ENV_NAME, testRatio.ToString());
                Environment.SetEnvironmentVariable(REDUCED_SIZE_ENV_NAME, reducedSize.ToString());

                Environment.SetEnvironmentVariable(CLASSIFIER_IDS_ENV_NAME, string.Join(" ", classifierIndexs));

                output = Wrapper.ExecutePythonMain();

                //_userControl.outputRichTextBox.Text += output + Environment.NewLine;

                MessageBox.Show("Done");

            }
            catch (Exception ex)
            {
                MessageBox.Show("Exception: " + ex.Message);
                hasError = true;
            }
            finally
            {
                // Cleanup
                //foreach (var graphPath in _targetPaths)
                //{
                //    if (File.Exists(graphPath))
                //        File.Delete(graphPath);
                //}

                // Active form
                Wrapper.SetButtonState(this._userControl.startButton, true);
                Wrapper.SetProgressBar(this._userControl.progressBar, 100, hasError);
            }

            return !hasError;
        }
    }
}
