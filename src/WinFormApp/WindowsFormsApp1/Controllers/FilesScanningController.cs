using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsApp1.UserControls;
using static WindowsFormsApp1.Controllers.Storage;
using static WindowsFormsApp1.Controllers.TrainingController;
using static WindowsFormsApp1.Controls.MiningUserControl;
using static WindowsFormsApp1.UserControls.FilesScanningUserControl;
using static WindowsFormsApp1.UserControls.SettingUserControl;

namespace WindowsFormsApp1.Controllers
{
    public class FilesScanningController
    {
        private FilesScanningUserControl _userControl = null;
        public FilesScanningController(FilesScanningUserControl userControl) 
        {
            _userControl = userControl;                       
        }

        private List<string> _targetPaths = null;

        public bool Start(FileTypeEnum type, FileFormatEnum srcFormat, string[] inputPaths)
        {
            Wrapper.SetButtonState(this._userControl.startButton, false);
            Wrapper.SetProgressBar(this._userControl.progressBar, 0, false);

            _targetPaths = new List<string>();
            var filesDict = new Dictionary<string, string>();

            bool hasError = false;
            try
            {
                var filteredInputPaths = new List<string>();
                foreach (var inputPath in inputPaths)
                {
                    if (!filteredInputPaths.Any(x => x.Equals(inputPath, StringComparison.OrdinalIgnoreCase)))
                        filteredInputPaths.Add(inputPath);
                }
                inputPaths = filteredInputPaths.ToArray();

                if (type == FileTypeEnum.FILES)
                {
                    // Convert to graph
                    if (srcFormat != FileFormatEnum.GRAPH)
                    {
                        foreach (var inputPath in inputPaths)
                        {
                            var graphPath = Path.Combine(TEMP_DIR, Guid.NewGuid().ToString("D"));

                            try
                            {
                                if (Home.GetInstance().miningController.Convert(inputPath, string.Empty, srcFormat, graphPath, FileFormatEnum.GRAPH, false))
                                {
                                    _targetPaths.Add(graphPath);
                                    filesDict[graphPath] = inputPath;
                                }
                            }
                            catch (Exception ex)
                            {
                                if (File.Exists(graphPath))
                                    File.Delete(graphPath);
                            }
                        }
                    }
                    else
                    {
                        _targetPaths = inputPaths.ToList();

                        foreach (var path in inputPaths)
                        {
                            filesDict[path] = path;
                        }
                    }
                }
                else
                {
                    _targetPaths = inputPaths.ToList();
                }

                // Load settings
                var appSettingsPath = Path.Combine(Home.GetInstance().GetDataLocation(), APP_SETTINGS_FILE_NAME);
                if (!File.Exists(appSettingsPath))
                    throw new Exception("App settings not found");
                AppSettings appSettings = JsonConvert.DeserializeObject<AppSettings>(File.ReadAllText(appSettingsPath));

                if (!File.Exists(appSettings.ConfigPath))
                    throw new Exception("Model config not found");
                ModelConfig modeConfig = JsonConvert.DeserializeObject<ModelConfig>(File.ReadAllText(appSettings.ConfigPath));

                Environment.SetEnvironmentVariable(MODE_ID_ENV_NAME, ((int)ModeEnum.SCAN).ToString());
                Environment.SetEnvironmentVariable(OUTPUT_DIR_ENV_NAME, OUTPUT_DIR);

                Environment.SetEnvironmentVariable(CLASSIFIER_PATH_ENV_NAME, appSettings.ClassifierPath);
                Environment.SetEnvironmentVariable(SCALER_PATH_ENV_NAME, appSettings.DataScalerPath);
                Environment.SetEnvironmentVariable(DECOMPOSITION_PATH_ENV_NAME, appSettings.DataDecompositionPath);
                Environment.SetEnvironmentVariable(EXTRA_PATH_ENV_NAME, appSettings.ExtraDataPath);

                Environment.SetEnvironmentVariable(TARGET_TYPE_ID_ENV_NAME, ((int)type).ToString());
                Environment.SetEnvironmentVariable(TARGET_PATHS_ENV_NAME, string.Join(";", _targetPaths));

                Environment.SetEnvironmentVariable(FEATURE_ID_ENV_NAME, modeConfig.feature_id.ToString());
                Environment.SetEnvironmentVariable(SEQUENCE_LEN_ENV_NAME, modeConfig.sequence_len.ToString());

                var output = Wrapper.ExecutePythonMain();
                var predictLine = output.Split('\n').Where(line => line.Contains("predicts:")).FirstOrDefault();

                bool[] predicts = new bool[0];
                if (predictLine != null && predictLine.Length > 0)
                {
                    int pred = 0;
                    predicts = predictLine.Split(' ')
                        .Select(part => part.Trim())
                        .Where(part => part.Length > 0 && int.TryParse(part, out pred))
                        .Select(part => int.Parse(part) > 0)
                        .ToArray();
                }

                var message = "SCAN RESULT" + Environment.NewLine;
                message += "Total: " + inputPaths.Length.ToString() + Environment.NewLine;
                message += "Valid:" + predicts.Length.ToString() + Environment.NewLine;
                message += "Detected: " + predicts.Count(x => x).ToString() + Environment.NewLine;

                var histories = LoadHistory();
                int nextId = 0;
                if (histories.Count > 0)
                    nextId = histories.Max(x => x.Id) + 1;

                for (int iPredict = 0; iPredict < predicts.Length; iPredict++)
                {
                    histories.Add(new FileHistoryRecord(nextId, filesDict[_targetPaths[iPredict]], srcFormat, predicts[iPredict]));
                    nextId += 1;
                }
                SaveHistory(histories);
                BindHitoryToView(histories);

                MessageBox.Show(message);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Exception: " + ex.Message);
                hasError = true;
            }
            finally
            {
                // Cleanup
                foreach (var graphPath in _targetPaths)
                {
                    if (File.Exists(graphPath))
                        File.Delete(graphPath);
                }

                // Active form
                Wrapper.SetButtonState(this._userControl.startButton, true);
                Wrapper.SetProgressBar(this._userControl.progressBar, 100, hasError);
            }

            return !hasError;
        }

        public List<FileHistoryRecord> LoadHistory()
        {
            var historyPath = Path.Combine(Home.GetInstance().GetDataLocation(), FILES_HISTORY_FILE_NAME);
            if (!File.Exists(historyPath))
            {
                File.WriteAllText(historyPath, "[]");
            }

            return JsonConvert.DeserializeObject<FileHistoryRecord[]>(File.ReadAllText(historyPath)).ToList();
        }

        public void SaveHistory(List<FileHistoryRecord> histories)
        {
            var historyPath = Path.Combine(Home.GetInstance().GetDataLocation(), FILES_HISTORY_FILE_NAME);
            File.WriteAllText(historyPath, JsonConvert.SerializeObject(histories.ToArray()));
        }

        public void BindHitoryToView(List<FileHistoryRecord> histories)
        {
            var historyDataGridView = _userControl.historyDataGridView;
            historyDataGridView.Invoke((MethodInvoker)delegate
            {
                var table = new DataTable();
                table.Columns.Add("Id", typeof(int));
                table.Columns.Add("FilePath", typeof(string));
                table.Columns.Add("Format", typeof(FileFormatEnum));
                table.Columns.Add("IsMalware", typeof(bool));

                foreach (var history in histories)
                {
                    var dataRow = table.NewRow();
                    dataRow["Id"] = history.Id;
                    dataRow["FilePath"] = history.FilePath;
                    dataRow["Format"] = history.Format;
                    dataRow["IsMalware"] = history.IsMalware;

                    table.Rows.Add(dataRow);
                }

                historyDataGridView.DataSource = new BindingSource(table, null);
            });
        }
    }
}
