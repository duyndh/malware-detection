using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsApp1.UserControls;
using static WindowsFormsApp1.Controllers.Storage;
using static WindowsFormsApp1.Controllers.TrainingController;
using static WindowsFormsApp1.Controls.MiningUserControl;
using static WindowsFormsApp1.UserControls.FilesScanningUserControl;
using static WindowsFormsApp1.UserControls.SettingUserControl;

namespace WindowsFormsApp1.Controllers
{
    public class FilesScanningController
    {
        private FilesScanningUserControl _userControl = null;
        public FilesScanningController(FilesScanningUserControl userControl) { _userControl = userControl; }
                
        public bool Start(FileTypeEnum type, FileFormatEnum srcFormat, string[] filePaths)
        {
            bool result = false;
            var graphPaths = new List<string>();

            try
            {
                if (type == FileTypeEnum.Files)
                {
                    // Convert to graph
                    if (srcFormat != FileFormatEnum.Graph)
                    {
                        foreach (var rawPath in filePaths)
                        {
                            var graphPath = Path.Combine(TEMP_DIR, Guid.NewGuid().ToString("D"));

                            try
                            {
                                if (Home.GetInstance().miningController.Convert(rawPath, string.Empty, srcFormat, graphPath, FileFormatEnum.Graph, false))
                                    graphPaths.Add(graphPath);
                            }
                            catch (Exception ex)
                            {
                                if (File.Exists(graphPath))
                                    File.Delete(graphPath);
                            }
                        }
                    }
                    else
                        graphPaths = filePaths.ToList();

                    // Load settings
                    var appSettingsPath = Path.Combine(Home.GetInstance().GetDataLocation(), APP_SETTINGS_FILE_NAME);
                    if (!File.Exists(appSettingsPath))
                        throw new Exception("App settings not found");
                    AppSettings appSettings = JsonConvert.DeserializeObject<AppSettings>(File.ReadAllText(appSettingsPath));

                    if (!File.Exists(appSettings.ConfigPath))
                        throw new Exception("Model config not found");
                    ModelConfig modeConfig = JsonConvert.DeserializeObject<ModelConfig>(File.ReadAllText(appSettings.ConfigPath));

                    do
                    {
                        Environment.SetEnvironmentVariable(MODE_ID_ENV_NAME, ((int)ModeEnum.SCAN).ToString());

                        Environment.SetEnvironmentVariable(CLASSIFIER_PATH_ENV_NAME, appSettings.ClassifierPath);
                        Environment.SetEnvironmentVariable(SCALER_PATH_ENV_NAME, appSettings.DataScalerPath);
                        Environment.SetEnvironmentVariable(DECOMPOSITION_PATH_ENV_NAME, appSettings.DataDecompositionPath);
                        Environment.SetEnvironmentVariable(EXTRA_PATH_ENV_NAME, appSettings.ExtraDataPath);

                        Environment.SetEnvironmentVariable(TARGET_TYPE_ID_ENV_NAME, ((int)type).ToString());
                        Environment.SetEnvironmentVariable(TARGET_PATHS_ENV_NAME, string.Join(";", graphPaths));

                        Environment.SetEnvironmentVariable(FEATURE_ID_ENV_NAME, modeConfig.feature_id.ToString());
                        Environment.SetEnvironmentVariable(SEQUENCE_LEN_ENV_NAME, modeConfig.sequence_len.ToString());

                        var output = Wrapper.ExecutePythonMain();

                        var predictResult = Environment.GetEnvironmentVariable("EDITH_predict_results");

                        //_userControl.WriteToOutputRichTextBoxContent(_output);
                        break;
                    
                    } while (false);
                }
                else
                {

                }
            }
            catch (Exception ex) { }

            // Cleanup
            foreach (var graphPath in graphPaths)
            {
                if (File.Exists(graphPath))
                    File.Delete(graphPath);
            }

            // Active form
            Wrapper.SetButtonState(this._userControl.startButton, true);
            Wrapper.SetProgressBar(this._userControl.progressBar, 100);
            MessageBox.Show("Done");

            return result;
        }
    }
}
