using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsApp1.UserControls;
using static WindowsFormsApp1.Controllers.Storage;
using static WindowsFormsApp1.Controllers.TrainingController;
using static WindowsFormsApp1.Controls.MiningUserControl;
using static WindowsFormsApp1.UserControls.FilesScanningUserControl;
using static WindowsFormsApp1.UserControls.SettingUserControl;

namespace WindowsFormsApp1.Controllers
{
    public class FilesScanningController
    {
        private FilesScanningUserControl _userControl = null;
        public FilesScanningController(FilesScanningUserControl userControl)
        {
            _userControl = userControl;
        }

        public bool Start(FileTypeEnum type, FileFormatEnum srcFormat, string[] inputPaths)
        {
            Wrapper.SetButtonState(this._userControl.startButton, false);
            Wrapper.SetProgressBar(this._userControl.progressBar, 0, false);

            string message = string.Empty;
            List<int> newMalwareHistoryIds;
            bool result = Wrapper.ScanFiles(type, srcFormat, inputPaths, out newMalwareHistoryIds, out message);

            MessageBox.Show(message);

            // Active form
            Wrapper.SetButtonState(this._userControl.startButton, true);
            Wrapper.SetProgressBar(this._userControl.progressBar, 100, !result);

            return result;
        }

        public List<FileHistoryRecord> LoadHistory()
        {
            var historyPath = Path.Combine(Home.GetInstance().GetDataLocation(), FILES_HISTORY_FILE_NAME);
            if (!File.Exists(historyPath))
            {
                File.WriteAllText(historyPath, "[]");
            }

            return JsonConvert.DeserializeObject<FileHistoryRecord[]>(File.ReadAllText(historyPath)).ToList();
        }

        public void SaveHistory(List<FileHistoryRecord> histories)
        {
            var historyPath = Path.Combine(Home.GetInstance().GetDataLocation(), FILES_HISTORY_FILE_NAME);
            File.WriteAllText(historyPath, JsonConvert.SerializeObject(histories));
        }

        public void BindHitoryToView(List<FileHistoryRecord> histories)
        {
            var table = new DataTable();
            table.Columns.Add("Id", typeof(int));
            table.Columns.Add("FilePath", typeof(string));
            table.Columns.Add("Format", typeof(FileFormatEnum));
            table.Columns.Add("IsMalware", typeof(bool));

            for (int iHistory = 0; iHistory < histories.Count; iHistory++)
            {
                var dataRow = table.NewRow();
                dataRow["Id"] = histories[iHistory].Id;
                dataRow["FilePath"] = histories[iHistory].FilePath;
                dataRow["Format"] = histories[iHistory].Format;
                dataRow["IsMalware"] = histories[iHistory].IsMalware;

                table.Rows.Add(dataRow);
            }

            var historyDataGridView = _userControl.historyDataGridView;
            historyDataGridView.Invoke((MethodInvoker)delegate
            {
                historyDataGridView.DataSource = new BindingSource(table, null);
                
                var gridViewWidth = historyDataGridView.Width;
                historyDataGridView.Columns["Id"].Width = (int)(gridViewWidth * 0.05);
                historyDataGridView.Columns["FilePath"].Width = (int)(gridViewWidth * 0.65);
                historyDataGridView.Columns["Format"].Width = (int)(gridViewWidth * 0.1);
                historyDataGridView.Columns["IsMalware"].Width = (int)(gridViewWidth * 0.1);

                historyDataGridView.Columns["IsMalware"].SortMode = DataGridViewColumnSortMode.Automatic;

                historyDataGridView.Sort(historyDataGridView.Columns[0], System.ComponentModel.ListSortDirection.Descending);

                for (int iHistory = 0; iHistory < histories.Count; iHistory++)
                {
                    if (histories[(int)(historyDataGridView.Rows[iHistory].Cells[0].Value)].IsMalware)
                        historyDataGridView.Rows[iHistory].DefaultCellStyle.ForeColor = Color.Red;
                    else
                        historyDataGridView.Rows[iHistory].DefaultCellStyle.ForeColor = Color.Green;
                }
            });
        }
    }
}
