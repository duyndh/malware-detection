using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace WindowsFormsApp1.Controllers
{
    public class Storage
    {
        public enum FileTypeEnum
        {
            FILES,
            DIRECTORIES,
            COUNT
        }
        public enum FileFormatEnum
        {
            RAW,
            ASSEMBLY,
            STANDARD,
            GRAPH,
            COUNT
        }
        public enum NavigationOptionEnum
        {
            FILES,
            PROCESSES,
            MINING,
            TRAINING,
            SETTINGS
        }
        public enum LogTypeEnum
        {
            INFO,
            WARNING,
            ERROR,
        }
        //public enum MixedFeatureEnum
        //{
        //    TF_1G,
        //    TF_2G_LINEAR,
        //    TF_2G_GRAPH,

        //    TFIDF_1G,
        //    TFIDF_2G_LINEAR,
        //    TFIDF_2G_GRAPH,

        //    PR_LINEAR,
        //    PR_GRAPH,

        //    COUNT
        //}
        public enum FeatureEnum
        {
            TF,
            TF_IDF,
            PR,
            Count
        }
        public enum SequenceTypeEnum
        {
            LINEAR,
            GRAPH,
            COUNT
        }
        public enum SequenceLengthEnum
        {
            G1,
            G2,
            COUNT
        }
        public enum ModeEnum
        {
            MINE,
            TRAIN,
            SCAN,
            COUNT
        }
        public enum TestRatioEnum
        {
            P1,
            P2,
            P3,
            P4,
            P5,
            P6,
            P7,
            P8,
            P9,
            COUNT
        }
        public enum ClassifierEnum
        {
            KNN,
            SVM,
            LogisticRegression,
            NeuralNetwork,
            NaiveBayes,
            QDA,
            LDA,
            DecisionTree,
            RandomForest,
            ExtraTrees,
            AdaBoost,
            GradientBoosting,
            COUNT
        }

        public enum ScanningStatus
        {
            UNKNOWN,
            BENIGN,
            MALWARE
        }


        public static readonly int MAX_STACK_SIZE = 64 * 1024 * 1024;
        public static readonly int MAX_PATH = 260;

        public static readonly string ASM_EXT = ".asm";
        public static readonly string BYTES_EXT = ".bytes";
        public static readonly string STANDARD_EXT = ".scsv";
        public static readonly string GRAPH_EXT = ".gcsv";

        public static readonly string[] PE_EXTS = { ".acm", ".ax", ".cpl", ".dll", ".drv", ".efi", ".exe", ".mui", ".ocx", ".scr", ".sys", ".tsp" };

        public static readonly HashSet<FileFormatEnum>[] DATA_FORMAT_DIRECTIONS = new HashSet<FileFormatEnum>[]
        {
            new HashSet<FileFormatEnum>() { FileFormatEnum.STANDARD, FileFormatEnum.GRAPH },
            new HashSet<FileFormatEnum>() { FileFormatEnum.STANDARD, FileFormatEnum.GRAPH },
            new HashSet<FileFormatEnum>() { FileFormatEnum.GRAPH },
            new HashSet<FileFormatEnum>() { }
        };

        public static readonly string TEMP_DIR = Environment.ExpandEnvironmentVariables("%Temp%");
        public static readonly string OUTPUT_DIR = @"c:\temp\output";

        public static readonly string APP_SETTINGS_FILE_NAME = "settings.json";
        public static readonly string FILES_HISTORY_FILE_NAME = "file_history.json";


        public static readonly string MODE_ID_ENV_NAME = "EDITH_mode_id";
        public static readonly string OUTPUT_DIR_ENV_NAME = "EDITH_output_dir";

        public static readonly string CLASSIFIER_PATH_ENV_NAME = "EDITH_clf_path";
        public static readonly string SCALER_PATH_ENV_NAME = "EDITH_scl_path";
        public static readonly string DECOMPOSITION_PATH_ENV_NAME = "EDITH_dcp_path";
        public static readonly string EXTRA_PATH_ENV_NAME = "EDITH_ext_path";

        public static readonly string TARGET_TYPE_ID_ENV_NAME = "EDITH_target_type_id";
        public static readonly string TARGET_PATHS_ENV_NAME = "EDITH_target_paths";

        public static readonly string FEATURE_ID_ENV_NAME = "EDITH_feature_id";
        public static readonly string SEQUENCE_LEN_ENV_NAME = "EDITH_sequence_len";
        public static readonly string TEST_RATIO_ENV_NAME = "EDITH_test_ratio";
        public static readonly string REDUCED_SIZE_ENV_NAME = "EDITH_reduced_size";

        public static readonly string BENIGN_DIRS_ENV_NAME = "EDITH_benign_dirs";
        public static readonly string BENIGN_LIMIT_ENV_NAME = "EDITH_benign_limit";
        public static readonly string MALWARE_DIRS_ENV_NAME = "EDITH_malware_dirs";
        public static readonly string MALWARE_LIMIT_ENV_NAME = "EDITH_malware_limit";

        public static readonly string CLASSIFIER_IDS_ENV_NAME = "EDITH_classifier_ids";


        [DllImport("NativeLib.dll")]
        public extern static void Test();

        [DllImport("NativeLib.dll")]
        public extern static bool DisassemblyFile(string input_file_path, string asm_file_path, string output_file_path);

        [DllImport("NativeLib.dll")]
        public extern static bool BuildInstructionsGraph(string input_file_path, string output_file_path);

        [DllImport("NativeLib.dll")]
        public extern static bool BuildGraphFromFile(string input_file_path, string asm_file_path, string output_file_path);

        public class AppSettings
        {
            public string DataScalerPath;
            public string DataDecompositionPath;
            public string ClassifierPath;
            public string ExtraDataPath;
            public string ConfigPath;
        }

        public class ModelConfig
        {
            public int feature_id;
            public int sequence_len;
            public int reduced_size;
        }

        public class FileHistoryRecord
        {
            public FileHistoryRecord(int _id, string _filePath, FileFormatEnum _format, bool _isMalware, string _rootDir, string _visualName) 
            {
                Id = _id; FilePath = _filePath; Format = _format; IsMalware = _isMalware; RootDir = _rootDir; VisualName = _visualName;
            }

            public int Id;
            public string FilePath;
            public FileFormatEnum Format;
            public bool IsMalware;
            public string RootDir;
            public string VisualName;
        }

        public class TrainingResultRecord
        {
            public TrainingResultRecord() { }

            public TrainingResultRecord(int _id, ClassifierEnum _classifier, string _bestParamters, float _bestScore, float _accuracy, float _precision, float _recall, float _f1_score)
            {
                Id = _id;
                Classifier = _classifier;
                BestParamters = _bestParamters;
                BestScore = _bestScore;
                Accuracy = _accuracy;
                Precision = _precision;
                Recall = _recall;
                F1_Score = _f1_score;
            }

            public int Id;
            public ClassifierEnum Classifier;
            public string BestParamters;
            public float BestScore;
            public float Accuracy;
            public float Precision;
            public float Recall;
            public float F1_Score;
        }

        public class ProcessInfoRecord
        {
            public ProcessInfoRecord(string _name, int _pid, string _path) { Name = _name; Pid = _pid; ExePath = _path; Status = ScanningStatus.UNKNOWN; }

            public string Name;
            public int Pid;
            public string ExePath;
            public ScanningStatus Status;
        }

        [DllImport("Kernel32.dll")]
        public extern static IntPtr OpenProcess(UInt32 dwDesiredAccess, int bInheritHandle, UInt32 dwProcessId);

        [DllImport("Kernel32.dll")]
        public extern static int CloseHandle(IntPtr hObject);

        [DllImport("Psapi.dll")]
        public extern static UInt32 GetModuleFileNameExW(IntPtr hProcess, IntPtr hModule, IntPtr lpFilename, UInt32 nSize);

        public const int PROCESS_QUERY_INFORMATION = 0x0400;
        public const int PROCESS_VM_READ = 0x0010;
    }
}
