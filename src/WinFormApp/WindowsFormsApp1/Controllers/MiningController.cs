using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsApp1.Controls;
using static WindowsFormsApp1.Controllers.Storage;
using static WindowsFormsApp1.Controls.MiningUserControl;

namespace WindowsFormsApp1.Controllers
{
    public class MiningController
    {
        private MiningUserControl _userControl = null;
        public MiningController(MiningUserControl userControl) { _userControl = userControl; }

        private HashSet<string> _inputFileHashes = new HashSet<string>();

        public bool Convert(string inputPath, string asmPath, FileFormatEnum srcFormat, string outputPath, FileFormatEnum dstFormat, bool calculateHash)
        {
            bool result = false;
            try
            {
                do
                {
                    if (calculateHash)
                    {
                        var fileHash = Wrapper.CalculateFileHash(inputPath);
                        if (_inputFileHashes.Contains(fileHash))
                            break;
                        _inputFileHashes.Add(fileHash);
                    }

                    if (srcFormat == FileFormatEnum.Raw || srcFormat == FileFormatEnum.Assembly)
                    {
                        if (dstFormat == FileFormatEnum.Standard)
                        {
                            if (!DisassemblyFile(inputPath, asmPath, outputPath))
                                break;
                        }
                        else if (dstFormat == FileFormatEnum.Graph)
                        {
                            if (!BuildGraphFromFile(inputPath, asmPath, outputPath))
                                break;
                        }
                        else
                            break;
                    }
                    else if (srcFormat == FileFormatEnum.Standard)
                    {
                        if (dstFormat == FileFormatEnum.Graph)
                        {
                            if (!BuildInstructionsGraph(inputPath, outputPath))
                                break;
                        }
                        else
                            break;
                    }
                    else
                        break;
                
                    result = true;

                } while (false);
            }
            catch (Exception ex) { }

            return result;
        }

        public bool Start(string srcLocation, FileFormatEnum srcFormat, string dstLocation, FileFormatEnum dstFormat, int dstCountLimit, bool onlyPeExts)
        {
            var paths = new List<Tuple<string, string, string>>();

            do
            {
                var dstExt = "";
                if (dstFormat == FileFormatEnum.Standard)
                {
                    dstExt = STANDARD_EXT;
                }
                else if (dstFormat == FileFormatEnum.Graph)
                {
                    dstExt = GRAPH_EXT;
                }
                else
                    break;

                if (srcFormat == FileFormatEnum.Raw)
                {
                    var inputPaths = Wrapper.EnumerateDirectoryFiles(srcLocation, "*.*", SearchOption.AllDirectories)
                        .Where(path => onlyPeExts ? PE_EXTS.Contains(Path.GetExtension(path)) : true)
                        .ToArray();

                    foreach (var inputPath in inputPaths)
                    {
                        var outputName = Wrapper.ConvertToAlphaNumString(inputPath) + dstExt;
                        var outputPath = Path.Combine(dstLocation, outputName);
                        //if (outputPath.Length > Wrapper.MAX_PATH)
                        //    outputPath = Path.Combine(dstLocation, outputName.Substring(Wrapper.MAX_PATH - outputPath.Length));                        

                        paths.Add(new Tuple<string, string, string>(inputPath, "", outputPath));
                    }
                }
                else if (srcFormat == FileFormatEnum.Assembly)
                {
                    var inputPaths = Wrapper.EnumerateDirectoryFiles(srcLocation, "*" + BYTES_EXT, SearchOption.AllDirectories).ToArray();
                    foreach (var inputPath in inputPaths)
                    {
                        var asmPath = Path.ChangeExtension(inputPath, ASM_EXT);
                        if (!File.Exists(asmPath))
                            continue;

                        var outputName = Wrapper.ConvertToAlphaNumString(inputPath) + dstExt;
                        var outputPath = Path.Combine(dstLocation, outputName);
                        //if (outputPath.Length > Wrapper.MAX_PATH)
                        //    outputPath = Path.Combine(dstLocation, outputName.Substring(Wrapper.MAX_PATH - outputPath.Length));

                        paths.Add(new Tuple<string, string, string>(inputPath, asmPath, outputPath));
                    }
                }
                else if (srcFormat == FileFormatEnum.Standard)
                {
                    var inputPaths = Wrapper.EnumerateDirectoryFiles(srcLocation, "*" + STANDARD_EXT, SearchOption.AllDirectories).ToArray();
                    foreach (var inputPath in inputPaths)
                    {
                        var outputName = Wrapper.ConvertToAlphaNumString(inputPath) + dstExt;
                        var outputPath = Path.Combine(dstLocation, outputName);
                        //if (outputPath.Length > Wrapper.MAX_PATH)
                        //    outputPath = Path.Combine(dstLocation, outputName.Substring(Wrapper.MAX_PATH - outputPath.Length));

                        paths.Add(new Tuple<string, string, string>(inputPath, "", outputPath));
                    }
                }
                else
                    break;

                // Start
                int outputCount = 0;
                foreach (var path in paths)
                {
                    if (outputCount >= dstCountLimit)
                        break;

                    if (Convert(path.Item1, path.Item2, srcFormat, path.Item3, dstFormat, true))
                    {
                        outputCount++;
                    }
                    else
                    {
                        Logger.Log(LogTypeEnum.ERROR, path.Item1);
                    }
                }

            } while (false);

            _userControl.SetStartProgressBar(100);
            MessageBox.Show("Done");
            _userControl.SetStartButtonState(true);

            return true;
        }
    }
}
