using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsApp1.Forms;
using static WindowsFormsApp1.Controllers.Storage;

namespace WindowsFormsApp1.Controllers
{
    public class ProcessesScanningController
    {
        private ProcessesScanningUserControl _userControl = null;
        public ProcessesScanningController(ProcessesScanningUserControl userControl)
        {
            _userControl = userControl;
        }

        private List<ProcessInfoRecord> _processInfoRecords = new List<ProcessInfoRecord>();
        private HashSet<string> _exePaths = new HashSet<string>();

        public void BindProcessesToView(ProcessInfoRecord[] processInfoRecords)
        {
            var table = new DataTable();
            table.Columns.Add("Name", typeof(string));
            table.Columns.Add("PID", typeof(int));
            table.Columns.Add("ExePath", typeof(string));
            table.Columns.Add("Status", typeof(ScanningStatus));

            foreach (var processInfoRecord in processInfoRecords)
            {
                var dataRow = table.NewRow();
                dataRow["Name"] = processInfoRecord.Name;
                dataRow["PID"] = processInfoRecord.Pid;
                dataRow["ExePath"] = processInfoRecord.ExePath;
                dataRow["Status"] = processInfoRecord.Status;

                // ExePath
                table.Rows.Add(dataRow);
            }

            var processDataGridView = _userControl.processDataGridView;
            processDataGridView.Invoke((MethodInvoker)delegate
            {
                processDataGridView.DataSource = new BindingSource(table, null);

                var gridViewWidth = processDataGridView.Width;
                processDataGridView.Columns["Name"].Width = (int)(gridViewWidth * 0.2);
                processDataGridView.Columns["PID"].Width = (int)(gridViewWidth * 0.1);
                processDataGridView.Columns["ExePath"].Width = (int)(gridViewWidth * 0.5);
                processDataGridView.Columns["Status"].Width = (int)(gridViewWidth * 0.1);

                for (int iProcess = 0; iProcess < processInfoRecords.Length; iProcess++)
                {
                    if (processInfoRecords[iProcess].Status == ScanningStatus.MALWARE)
                        processDataGridView.Rows[iProcess].DefaultCellStyle.ForeColor = Color.Red;
                    else if (processInfoRecords[iProcess].Status == ScanningStatus.BENIGN)
                        processDataGridView.Rows[iProcess].DefaultCellStyle.ForeColor = Color.Green;
                }
            });
        }

        public void Refresh()
        {
            var processes = Process.GetProcesses();
            _processInfoRecords = new List<ProcessInfoRecord>();

            IntPtr filePathPtr = Marshal.AllocHGlobal(Storage.MAX_PATH * 2);
            foreach (var process in processes)
            {
                var exePath = string.Empty;
                IntPtr processHandle = Storage.OpenProcess(Storage.PROCESS_QUERY_INFORMATION | Storage.PROCESS_VM_READ, 0, (UInt32)process.Id);
                if (processHandle != IntPtr.Zero)
                {
                    if (Storage.GetModuleFileNameExW(processHandle, IntPtr.Zero, filePathPtr, (UInt32)Storage.MAX_PATH) != 0)
                    {
                        exePath = Marshal.PtrToStringUni(filePathPtr);
                        _exePaths.Add(exePath);
                    }

                    Storage.CloseHandle(processHandle);
                }

                _processInfoRecords.Add(new ProcessInfoRecord(
                    process.ProcessName,
                    process.Id,
                    exePath
                ));
            }
            Marshal.FreeHGlobal(filePathPtr);

            // Display
            Home.GetInstance().processesScanningController.BindProcessesToView(_processInfoRecords.ToArray());
        }

        public void Start()
        {
            Wrapper.SetButtonState(this._userControl.startButton, false);
            Wrapper.SetButtonState(this._userControl.refreshButton, false);

            // Scan
            string message = string.Empty;
            List<int> newMalwareHistoryIds;
            Wrapper.ScanFiles(FileTypeEnum.FILES, FileFormatEnum.RAW, _exePaths.ToArray(), out newMalwareHistoryIds, out message);

            var histories = Home.GetInstance().filesScanningControler.LoadHistory();

            var newMalwarePaths = histories.Where(x => newMalwareHistoryIds.Contains(x.Id)).Select(x => x.FilePath).ToArray();

            // Patch scan results
            foreach (var processInfoRecord in _processInfoRecords)
            {
                if (!string.IsNullOrEmpty(processInfoRecord.ExePath))
                {
                    if (newMalwarePaths.Any(x => x.Equals(processInfoRecord.ExePath, StringComparison.OrdinalIgnoreCase)))
                        processInfoRecord.Status = ScanningStatus.MALWARE;
                    else
                        processInfoRecord.Status = ScanningStatus.BENIGN;
                }
            }

            // Display
            Home.GetInstance().processesScanningController.BindProcessesToView(_processInfoRecords.ToArray());

            Wrapper.SetButtonState(this._userControl.startButton, true);
            Wrapper.SetButtonState(this._userControl.refreshButton, true);
        }
    }
}
