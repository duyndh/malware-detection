#pragma once
#include "pch.h"
#include "ConstantsContainer.h"
#include "Wrapper.h"

class GraphBuilder
{
private:
	struct InstructionNode
	{
		InstructionNode(DWORD64 _address = 0) : address(_address), op_code(0), direct_prev_index(MAXDWORD32) { }

		DWORD64 address;
		BYTE op_code;
		std::string op_name;
		std::list<ConstantsContainer::RegisterType> register_operands;
		std::list<DWORD64> immediates_operands;
		std::list<ConstantsContainer::RegisterType> memory_operands;
		
		std::unordered_set<DWORD> next_index_set;
		std::unordered_set<DWORD> prev_index_set;

		std::unordered_set<DWORD> next_ret_index_set; // Merged later
		std::unordered_set<DWORD> prev_ret_index_set; // Merged later
		DWORD direct_prev_index;
	};

	csh m_cs_handle = NULL;
	
	std::vector<InstructionNode> m_instructions;
	std::unordered_map<DWORD64, DWORD> m_address_to_index_map;

	std::set<DWORD> m_ret_index_set;
	DWORD m_unknown_nodes_count = 0;

	void SetDirectPrevForTraceStack(std::stack<DWORD>& trace_stack, DWORD index);
	void TraceCall(DWORD ret_index, DWORD index, std::stack<DWORD>& trace_stack, std::set<DWORD>& traveled_index_set, bool tracing);
	void LinkJumps();
	void LinkRets();
	void MergeRetLinking();

public:
	GraphBuilder();
	~GraphBuilder();

	bool LoadInstructions(const std::string input_file_path_str);
	void BuildGraph();
	void Export(const std::string output_file_path_str);
};