import os

import joblib
from sklearn.neighbors import KNeighborsClassifier

from const_container import *
from utils import *
from trainer import *


class Validator:

    @staticmethod
    def predict_sample(classifier_path, scaler_path, decomp_path, extra_path, sample):

        classifier = joblib.load(open(classifier_path, "rb"))
        scaler = joblib.load(open(scaler_path, "rb"))
        decomp = joblib.load(open(decomp_path, "rb"))
        extra_data_with_count = joblib.load(open(extra_path, "rb"))

        class_pred = 0
        try:
            # extract feature
            X, _ = FeatureExtractor.extract_feature(GlobalVars.feature_id, [sample], OPCODE_RANGE, GlobalVars.sequence_len, extra_data_with_count)

            # init
            _, X, scaler, decomp = Trainer.init_training(None, X, scaler, decomp)

            # predict
            class_pred = 1 if int(round(classifier.predict(X)[0])) > 0 else 0

        except Exception as e:
            log("ERROR: " + str(e))

        return class_pred

    @staticmethod
    def test_model(classifier_ids, samples, labels):

        scaler = joblib.load(open(os.path.join(GlobalVars.output_dir, "data.scl"), "rb"))
        decomp = joblib.load(open(os.path.join(GlobalVars.output_dir, "data.dcp"), "rb"))
        extra_data_with_count = joblib.load(open(os.path.join(GlobalVars.output_dir, "data.ext"), "rb"))

        for classifier_id in classifier_ids:
            try:

                classifier_name = ClassifierEnum.get_name(classifier_id)
                log("test model: " + classifier_name)

                # load and transform
                classifier = joblib.load(open(os.path.join(GlobalVars.output_dir, "{0}_{1}.mdl".format(classifier_id, classifier_name)), "rb"))

                # extract feature
                X, _ = FeatureExtractor.extract_feature(GlobalVars.feature_id, samples, OPCODE_RANGE, GlobalVars.sequence_len, extra_data_with_count)
                y = labels

                # init
                _, X, scaler, decomp = Trainer.init_training(None, X, scaler, decomp)

                # predict
                raw_predicts = classifier.predict(X)
                y_pred = np.stack([(1 if int(round(x)) > 0 else 0) for x in raw_predicts], axis=0)

                log("\n" + classification_report(y, y_pred))

            except Exception as e:
                log("ERROR: " + str(e))

