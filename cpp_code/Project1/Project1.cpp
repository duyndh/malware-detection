// Project1.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include "AsmParser.h"
#include "Wrapper.h"

int main()
{
	{
		//std::rename("c:\\temp\\hello.txt", "c:\\temp\\hi.bin");
	//return 0;
	//std::set<DWORD64> setImgBase;
	//for (auto& strFilePath : liFilePaths)
	//{
	//	std::filesystem::path path = strFilePath;
	//	
	//	auto parts = Wrapper::Split(path.filename().u8string(), "_");
	//	std::stringstream ssFileName;
	//	for (auto it = parts.begin(); it != parts.end(); it++)
	//	{
	//		if (it != parts.begin())
	//			ssFileName << '_';
	//		
	//		if (it == std::next(parts.begin()))
	//		{
	//			bool bNumeric = true;
	//			for (auto c : *it)
	//				if (!std::isdigit(c))
	//				{
	//					bNumeric = false;
	//					break;
	//				}

	//			if (bNumeric)
	//			{					
	//				DWORD64 num = std::stoul(*it);
	//				std::string strOrigin = std::to_string(num);
	//				std::string strHex = Wrapper::GetHexString(num);

	//				bool bOrigin = (strOrigin.length() - strOrigin.find_last_not_of('0') >= 5);
	//				bool bHex = (strHex.length() - strHex.find_last_not_of('0') >= 5);

	//				if (bHex && !bOrigin)
	//					ssFileName << strHex;
	//				else if (!bHex && bOrigin)
	//					ssFileName << strOrigin;
	//				else
	//					ssFileName << "";

	//				//setImgBase.insert(num);
	//			}
	//		}
	//		else
	//		{
	//			ssFileName << *it;
	//		}
	//	}

	//	std::filesystem::path newFilePath = path.parent_path();
	//	newFilePath.append(ssFileName.str());
	//	
	//	std::rename(strFilePath.c_str(), newFilePath.u8string().c_str());

	//	continue;
	//}

	//for (auto num : setImgBase)
	//{
	//	std::string strOrigin = std::to_string(num);
	//	std::string strHex = Wrapper::GetHexString(num);

	//	bool bOrigin = (strOrigin.length() - strOrigin.find_last_not_of('0') >= 5);
	//	bool bHex = (strHex.length() - strHex.find_last_not_of('0') >= 5);

	//	if (bOrigin)
	//		std::cout << "Origin: " << strOrigin;
	//	
	//	if (bHex)
	//		std::cout << "Hex: " << strHex;

	//	std::cout << std::endl;
	//	//std::cout << strOrigin << ' ' << strHex << std::endl;
	//}
	}
	
	auto liFilePaths = Wrapper::RecursiveEnumFiles(INPUT_DIR, { ASM_EXT });
	std::cout << "Total: " << liFilePaths.size() << std::endl;

	size_t iFile = 0;
	for (auto& strFilePath : liFilePaths)
	{
		iFile++;
		std::cout << iFile << "/" << liFilePaths.size();
		std::cout << ' ' << strFilePath << std::endl;

		AsmParser parser(strFilePath);
		if (!parser.Parse())
			continue;

		parser.ExportToCsvFile(OUTPUT_DIR);		
	}

	system("pause");
	
    return 0;
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
