#pragma once
#include "pch.h"

enum MachineType
{
	MachineType_UNKNOWN,
	MachineType_X86,
	MachineType_X64
};

struct Instruction
{
	std::string strOpcode;
	std::list<BYTE> liBytes;
	std::list<std::string> liOperands;
};

struct AsmInfo
{
	MachineType machine;
	DWORD64 qwImageBase;
	std::map<DWORD64, Instruction> mapInstructions;
};

#define STR_TEXT_SECTION ".text:"
#define PSEUDO_OPCODES { "db", "dw", "dd", "dq", "ddq", "do", "dt", "resb", "resw", "resq", "incbin", "equ", "times" }
#define MAP_MACHINE_TYPES { { MachineType_X86, "80386" }, { MachineType_X64, "AMD64" } }

class AsmParser
{
private:
	AsmParser() {}

	const std::set<std::string> m_SET_PSEUDO_OPCODES = PSEUDO_OPCODES;
	const std::map<MachineType, std::string> m_MAP_MACHINE_TYPE = MAP_MACHINE_TYPES;
	
	std::string m_strFilePath;

	// Info
	AsmInfo m_asmInfo;

	std::set<std::string> m_setOpCodes;
	
public:
	AsmParser(const std::string& strFilePath, bool bIdaAsm);
	
private:
	bool GetHeaderInfo(const std::string& strLine);
	bool ParseLine(std::string strLine);
	
public:
	bool Parse();
	void ExportToCsvFile(const std::string& strDirectory);
};