#pragma once
#include "pch.h"

//enum JumpAddressType
//{
//	JumpAddressType_Unknown,
//	JumpAddressType_Direct,
//	JumpAddressType_Near
//};

//enum OperandType
//{
//	Operand_Register,
//	//Operand_Pointer,
//	Operand_Immediate
//};

enum RegisterType
{
	Register_Unknown,
	
	Register_GeneralA,
	Register_GeneralB,
	Register_GeneralC,
	Register_GeneralD,
	
	Register_StackPtr,
	Register_StackBasePtr,
	Register_SourceIndex,
	Register_DestinationIndex,
	
	Register_SegmentStack,
	Register_SegmentCode,
	Register_SegmentData,
	Register_SegmentExtra,
	Register_SegmentF,
	Register_SegmentG
};

struct InstructionNode
{
	BYTE bOpCode;
	std::string strOpCode;
	std::list<std::string> liRawOperands;
	std::list<RegisterType> liRegisterOperands;
	std::set<DWORD64> setNextAddress;
	std::set<DWORD64> setPrevAddress;
	DWORD64 qwDirectPrevAddress;
	bool bHasDirectPrevAddress;
};

class GraphBuilder
{	
private:
	GraphBuilder() {}

	const std::map<std::string, RegisterType> REGISTERS_MAP =
	{
		{ "rax", Register_GeneralA },
		{ "eax", Register_GeneralA },
		{ "ax", Register_GeneralA },
		{ "ah", Register_GeneralA },
		{ "al", Register_GeneralA },

		{ "rbx", Register_GeneralB },
		{ "ebx", Register_GeneralB },
		{ "bx", Register_GeneralB },
		{ "bh", Register_GeneralB },
		{ "bl", Register_GeneralB },

		{ "rcx", Register_GeneralC },
		{ "ecx", Register_GeneralC },
		{ "cx", Register_GeneralC },
		{ "ch", Register_GeneralC },
		{ "cl", Register_GeneralC },

		{ "rdx", Register_GeneralD },
		{ "edx", Register_GeneralD },
		{ "dx", Register_GeneralD },
		{ "dh", Register_GeneralD },
		{ "dl", Register_GeneralD },

		{ "rsp", Register_StackPtr },
		{ "esp", Register_StackPtr },
		{ "sp", Register_StackPtr },
		{ "spl", Register_StackPtr },

		{ "rbp", Register_StackBasePtr },
		{ "ebp", Register_StackBasePtr },
		{ "bp", Register_StackBasePtr },
		{ "bpl", Register_StackBasePtr },

		{ "rsi", Register_SourceIndex },
		{ "esi", Register_SourceIndex },
		{ "si", Register_SourceIndex },
		{ "sil", Register_SourceIndex },

		{ "rdi", Register_DestinationIndex },
		{ "edi", Register_DestinationIndex },
		{ "di", Register_DestinationIndex },
		{ "dil", Register_DestinationIndex },

		{ "ss", Register_SegmentStack },
		{ "cs", Register_SegmentCode },
		{ "ds", Register_SegmentData },
		{ "es", Register_SegmentExtra },
		{ "fs", Register_SegmentF },
		{ "gs", Register_SegmentG },		
	};

	std::string m_strFilePath;
	std::map<DWORD64, InstructionNode> m_mapInstruction;

private:
	
	void BuildNodes(std::string& strLine);
	std::set<DWORD64> LinkJumps();

	void SetDirectPrevForTraceStack(std::stack<DWORD64>& stkTrace, DWORD64 qwAddress);
	
	void TraceCall(DWORD64 qwRetAddress, DWORD64 qwAddress, std::stack<DWORD64>& stkTrace, std::set<DWORD64>& setTraveledAddress, bool bTracing);
	void LinkRets(const std::set<DWORD64>& setRetAddress);

public:
	GraphBuilder(const std::string& strFilePath);

	void Build();
	void PrintGraph();
};
