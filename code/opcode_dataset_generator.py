from disassembler import *

import os
import hashlib
from util_wrapper import *


class OpcodeDatasetGenerator:

    @staticmethod
    def generate(raw_files, output_csv_file_path):
        print("Generating opcode dataset...")

        percent = 0
        print(0, "%")

        checksums = {}

        empty_opcode_count = 0
        duplicated_count = 0

        with open(output_csv_file_path, 'w', newline='') as csv_file:
            writer = csv.DictWriter(csv_file, fieldnames=["name", "machine", "opcodes", "md5"])
            writer.writeheader()
            for path_index, raw_file in enumerate(raw_files):

                percent = print_percent(path_index, percent, len(raw_files))

                file_name = os.path.basename(raw_file["path"])
                opcodes = DisAssembler.extract_opcodes(raw_file["path"])

                if len(opcodes) == 0:
                    empty_opcode_count += 1
                    continue

                opcode_hex = "".join("{:02x}".format(x) for x in opcodes)
                encoded_b64 = base64.b64encode(bytes.fromhex(opcode_hex))
                b64 = encoded_b64.decode()

                checksum = hashlib.md5(encoded_b64).hexdigest()
                if checksum in checksums:
                    duplicated_count += 1
                    continue

                writer.writerow({"name": file_name, "machine": raw_file["machine"], "opcodes": b64, "md5": checksum})
                checksums[checksum] = True

        print()
        print("empty_opcode_count", empty_opcode_count)
        print("duplicated_count", duplicated_count)

        print(100, "%")
        pass

    @staticmethod
    def load(csv_file_path, limit_file_count):

        print("Loading opcode dataset...")

        percent = 0
        print(0, "%")

        opcode_dataset = []

        with open(csv_file_path, newline='') as csv_file:

            reader = csv.DictReader(csv_file)
            data = list(reader)
            for row_index, row in enumerate(data):

                percent = print_percent(row_index, percent, len(data))

                if len(opcode_dataset) >= limit_file_count:
                    break

                b64 = row["opcodes"]

                decoded_hex = base64.b64decode(b64.encode()).hex()
                opcodes = [int(x) for x in bytes.fromhex(decoded_hex)]

                if len(opcodes) > 0:
                    opcode_dataset.append(opcodes)

        print(100, "%")

        return opcode_dataset