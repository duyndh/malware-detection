import numpy as np
import math

class FeatureExtractor:


    @staticmethod
    def get_sequence_opcode_counts(opcodes, sequence_length, output_linear_array):

        op_counts = np.zeros(pow(256, sequence_length), np.int)

        for op_index in range(len(opcodes) - sequence_length + 1):

            op_count_index = 0
            for seq_item_index in range(sequence_length):
                op_count_index += pow(256, sequence_length - seq_item_index - 1) * opcodes[op_index + seq_item_index]

            op_counts[op_count_index] += 1

        if output_linear_array:
            return op_counts
        else:
            return op_counts.reshape(tuple([256 for i in range(sequence_length)]))


    @staticmethod
    def extract_raw_frequency(opcodes_data, sequence_length):

        print("Extracting Raw frequency feature...")

        frequencies_data = []
        for opcodes in opcodes_data:
            op_counts = FeatureExtractor.get_sequence_opcode_counts(opcodes, sequence_length, True)
            seq_count = sum(op_counts)

            frequencies_data.append([count / seq_count for count in op_counts])

        return frequencies_data

    @staticmethod
    def extract_tf(opcodes_data, sequence_length):

        print("Extracting TF feature...")

        tfs_data = []
        for opcodes in opcodes_data:
            op_counts = FeatureExtractor.get_sequence_opcode_counts(opcodes, sequence_length, True)
            max_count = max(op_counts)

            tfs_data.append([count / max_count for count in op_counts])

        return tfs_data

    @staticmethod
    def extract_tf_idf(opcodes_data, sequence_length):

        print("Extracting TF-IDF feature...")

        data_include_op_counts = np.zeros(pow(256, sequence_length), np.int)

        tfs_data = []
        for opcodes in opcodes_data:
            op_counts = FeatureExtractor.get_sequence_opcode_counts(opcodes, sequence_length, True)
            max_count = max(op_counts)

            tfs_data.append([count / max_count for count in op_counts])

            for op_index in range(len(op_counts)):
                if op_counts[op_index] > 0:
                    data_include_op_counts[op_index] += 1

        idfs_data = [math.fabs(math.log(len(opcodes_data) / (count + 0.001))) for count in data_include_op_counts]

        tf_idfs_data = []
        for tfs in tfs_data:
            tf_idfs = []
            for tf_index in range(len(tfs)):
                tf_idfs.append(tfs[tf_index] * idfs_data[tf_index])
            tf_idfs_data.append(tf_idfs)

        return tf_idfs_data

