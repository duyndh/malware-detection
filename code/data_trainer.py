# from cached_property import cached_property

import numpy as np
# import matplotlib.pyplot as plt
# from matplotlib.colors import ListedColormap
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import make_moons, make_circles, make_classification
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.gaussian_process.kernels import RBF
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis



class DataTrainer:

    @staticmethod
    def train(classifier_name):




        pass

    @staticmethod
    def cross_train(data, labels):

        classifiers = {
            "Nearest Neighbors": KNeighborsClassifier(3),
            "Linear SVM": SVC(kernel="linear", C=0.025),
            "RBF SVM": SVC(gamma=2, C=1),
            "Gaussian Process": GaussianProcessClassifier(1.0 * RBF(1.0)),
            "Decision Tree": DecisionTreeClassifier(max_depth=5),
            "Random Forest": RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1),
            "Neural Net": MLPClassifier(alpha=1, max_iter=1000),
            "AdaBoost": AdaBoostClassifier(),
            "Naive Bayes": GaussianNB(),
            "QDA": QuadraticDiscriminantAnalysis()
        }

        X, y = data, labels

        # normalize
        X = StandardScaler().fit_transform(X)

        # split to train and test set
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.4, random_state=42)

        # iterate over classifiers
        for classifier_name in classifiers:
            classifier = classifiers[classifier_name]

            # fit model
            classifier.fit(X_train, y_train)
            # calculate accuracy
            score = classifier.score(X_test, y_test)

            print(classifier_name, score)

            pass

        pass