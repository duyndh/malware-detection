# from cached_property import cached_property

import numpy as np
# import matplotlib.pyplot as plt
# from matplotlib.colors import ListedColormap
from sklearn.metrics import accuracy_score, f1_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import make_moons, make_circles, make_classification
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.gaussian_process.kernels import RBF
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis as QDA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from sklearn.decomposition import PCA

class DataTrainer:

    @staticmethod
    def cross_train(X, y):

        classifiers = {
            "Nearest Neighbors": KNeighborsClassifier(3),
            "Linear SVM": SVC(kernel="linear", C=0.025),
            "RBF SVM": SVC(gamma=2, C=1),
            "Gaussian Process": GaussianProcessClassifier(1.0 * RBF(1.0)),
            "Decision Tree": DecisionTreeClassifier(max_depth=5),
            "Random Forest": RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1),
            "Neural Net": MLPClassifier(alpha=1, max_iter=1000),
            "AdaBoost": AdaBoostClassifier(),
            "Naive Bayes": GaussianNB(),
            "QDA": QDA(),
            "LDA": LDA()
        }

        # create scaller
        sc = StandardScaler()

        # split to train and test set
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.4, random_state=42)

        # normalize
        X_train = sc.fit_transform(X_train)
        X_test = sc.transform(X_test)

        # reduce number of dimension
        if True:
            pca = PCA(n_components=64)
            X_train_pca = pca.fit_transform(X_train)
            X_test_pca = pca.transform(X_test)

        # iterate over classifiers
        for classifier_name in classifiers:
            classifier = classifiers[classifier_name]

            # fit model
            if classifier_name == "LDA" or classifier_name == "QDA":
                classifier.fit(X_train_pca, y_train)
            else:
                classifier.fit(X_train, y_train)

            # calculate accuracy
            if classifier_name == "LDA" or classifier_name == "QDA":
                predicts = classifier.predict(X_test_pca)
            else:
                predicts = classifier.predict(X_test)

            acc = accuracy_score(y_test, predicts)
            f1 = f1_score(y_test, predicts)

            # output result
            print(classifier_name, "acc=", acc, "f1=", f1)

            pass

        pass