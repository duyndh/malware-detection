from opcode_dataset_generator import *
from raw_dataset_generator import *
from feature_extractor import *

import sys

file_count_limit = 1000
file_size_limit = 1024 * 1024
raw_dataset_csv_file_name = "_dataset.csv"
tmp_raw_file_path = os.path.expandvars("%SystemDrive%\\Temp\\_raw_files.csv")
tmp_filtered_file_path = os.path.expandvars("%SystemDrive%\\Temp\\_filtered_files.csv")

test_file_count_limit = 200

benign_scan_dirs = [
    os.path.expandvars("%ProgramFiles%"),
    os.path.expandvars("%ProgramFiles(x86)%"),
    os.path.expandvars("%WinDir%")
]

malware_scan_dir = [
    os.path.expanduser("~/Downloads/Virus.Win")
]

benign_scan_exts = [ ".acm", ".ax", ".cpl", ".dll", ".drv", ".efi", ".exe", ".mui", ".ocx", ".scr", ".sys", ".tsp" ]
malware_scan_exts = None

raw_benign_dataset_dir = os.path.expandvars("%SystemDrive%\\Temp\\benign_dataset")
raw_malware_dataset_dir = os.path.expandvars("%SystemDrive%\\Temp\\malware_dataset")

opcode_benign_dataset_csv_file_path = os.path.expanduser("~/Downloads/benign_opcodes.csv")
opcode_malware_dataset_csv_file_path = os.path.expanduser("~/Downloads/malware_opcodes.csv")

def init():
    maxInt = sys.maxsize

    while True:
        # decrease the maxInt value by factor 10
        # as long as the OverflowError occurs.

        try:
            csv.field_size_limit(maxInt)
            break
        except OverflowError:
            maxInt = int(maxInt / 10)

def generate_raw_dataset():

    if False:
        RawDatasetGenerator.generate(
            benign_scan_dirs,
            benign_scan_exts,
            raw_benign_dataset_dir,
            raw_dataset_csv_file_name,
            file_count_limit,
            file_size_limit,
            tmp_raw_file_path,
            tmp_filtered_file_path
        )

    if False:
        RawDatasetGenerator.generate(
            malware_scan_dir,
            malware_scan_exts,
            raw_malware_dataset_dir,
            raw_dataset_csv_file_name,
            file_count_limit,
            file_size_limit,
            tmp_raw_file_path,
            tmp_filtered_file_path
        )

    pass

def convert_raw_dataset_to_opcode_dataset():

    # Benign dataset
    if True:
        benign_file_paths = RawDatasetGenerator.load(raw_benign_dataset_dir, raw_dataset_csv_file_name,
                                                     [332], test_file_count_limit, file_size_limit)
        OpcodeDatasetGenerator.generate(benign_file_paths, opcode_malware_dataset_csv_file_path)

    # Benign dataset
    if True:
        benign_file_paths = RawDatasetGenerator.load(raw_malware_dataset_dir, raw_dataset_csv_file_name,
                                                     [332], test_file_count_limit, file_size_limit)
        OpcodeDatasetGenerator.generate(benign_file_paths, opcode_malware_dataset_csv_file_path)

    pass

def load_opcode_dataset():

    if True:
        benign_opcodes_dataset = OpcodeDatasetGenerator.load(opcode_benign_dataset_csv_file_path)

        op_matrixes = []

        for opcodes in benign_opcodes_dataset:
            op_matrixes.append(FeatureExtractor.extract_matrix(opcodes))

        return

    pass

def test():

    opcode_matrix = [[0 for x in range(256)] for y in range(10)]

    for opcode_index in range(1, len(opcode_matrix)):
        print(opcode_index - 1, opcode_index)

    return

if __name__ == '__main__':

    # test()

    init()

    if False:
        generate_raw_dataset()

    if False:
        convert_raw_dataset_to_opcode_dataset()

    if True:
        load_opcode_dataset()

    pass