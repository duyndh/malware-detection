from dataset_generator import *
import numpy as np
import json

def generate_raw_dataset():

    if False:
        DatasetGenerator.generate(
            [
                os.path.expandvars("%ProgramFiles%"),
                os.path.expandvars("%ProgramFiles(x86)%"),
                os.path.expandvars("%WinDir%")
            ],
            [
                ".acm", ".ax", ".cpl", ".dll", ".drv", ".efi", ".exe", ".mui", ".ocx", ".scr", ".sys", ".tsp"
            ],
            os.path.expandvars("%SystemDrive%\\Temp\\benign_dataset"),
            "_dataset.csv",
            1000,
            1024 * 1024,
            os.path.expandvars("%SystemDrive%\\Temp\\_raw_files.csv"),
            os.path.expandvars("%SystemDrive%\\Temp\\_filtered_files.csv")
        )

    if False:
        DatasetGenerator.generate(
            [
                os.path.expanduser("~/Downloads/Virus.Win")
            ],
            None,
            os.path.expanduser("~/Downloads/malware_dataset"),
            "_dataset.csv",
            1000,
            1024 * 1024,
            os.path.expanduser("~/Downloads/_raw_files.csv"),
            os.path.expanduser("~/Downloads/_filtered_files.csv")
        )

    pass

def generate_opcode_dataset(file_paths, output_csv_file_path):

    print("Generating opcode dataset...")

    percentage = 0
    print(0, "%")

    with open(output_csv_file_path, 'w', newline='') as csv_file:
        writer = csv.DictWriter(csv_file, fieldnames=["path", "opcodes"])
        writer.writeheader()
        for path_index, path in enumerate(file_paths):

            if int(path_index * 100 / len(file_paths)) > percentage:
                percentage = int(path_index * 100 / len(file_paths))
                print(percentage, "%")

            opcodes = DisAssembler.extract_opcodes(path)
            opcode_hex = "".join("{:02x}".format(x) for x in opcodes)

            b64 = base64.b64encode(bytes.fromhex(opcode_hex)).decode()

            # decoded_hex = base64.b64decode(b64.encode()).hex()
            # decoded_opcodes = [int(x) for x in bytes.fromhex(decoded_hex)]
            # print(len(opcodes), len(opcode_hex), len(b64), len(decoded_hex), len(decoded_opcodes))

            writer.writerow({"path": path, "opcodes": b64})

    print(100, "%")
    pass

def load_raw_dataset():

    # Benign dataset
    if False:
        benign_file_paths = DatasetGenerator.load(os.path.expanduser("~/Downloads/benign_dataset"), "_dataset.csv",
            [332], 200, 1024 * 1024)
        generate_opcode_dataset(benign_file_paths, os.path.expanduser("~/Downloads/benign_opcodes.csv"))

    # Benign dataset
    if False:
        benign_file_paths = DatasetGenerator.load(os.path.expanduser("~/Downloads/malware_dataset"), "_dataset.csv",
            [332], 200, 1024 * 1024)
        generate_opcode_dataset(benign_file_paths, os.path.expanduser("~/Downloads/malware_opcodes.csv"))

    pass

if __name__ == '__main__':

    if False:
        generate_raw_dataset()

    if True:
        load_raw_dataset()

    pass