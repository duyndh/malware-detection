from builtins import property

from opcode_dataset_generator import *
from raw_dataset_generator import *
from feature_extractor import *
from data_trainer import *

import sys
import platform

using_colab = True
root_dir = ""

if using_colab:
    root_dir = "./"
elif platform.system() == 'Linux':
    root_dir = os.path.expanduser("~/Downloads")
else:
    root_dir = os.path.expandvars("%SystemDrive%\\Temp")

file_count_limit = 10000
file_size_limit = 1024 * 1024
raw_dataset_csv_file_name = "_dataset.csv"
tmp_raw_file_path = os.path.join(root_dir, "_raw_files.csv")
tmp_filtered_file_path = os.path.join(root_dir, "_filtered_files.csv")

try_benign_file_count_limit = file_count_limit
try_malware_file_count_limit = file_count_limit

benign_scan_dirs = [
    os.path.expandvars("%ProgramFiles%"),
    os.path.expandvars("%ProgramFiles(x86)%"),
    os.path.expandvars("%WinDir%")
]

malware_scan_dir = [
    os.path.join(root_dir, "Virus.Win")
]

benign_scan_exts = [ ".acm", ".ax", ".cpl", ".dll", ".drv", ".efi", ".exe", ".mui", ".ocx", ".scr", ".sys", ".tsp" ]
malware_scan_exts = None

raw_benign_dataset_dir = os.path.join(root_dir, "benign_dataset")
raw_malware_dataset_dir = os.path.join(root_dir, "malware_dataset")

opcode_benign_dataset_csv_file_path_x86 = os.path.join(root_dir, "benign_opcodes_x86.csv")
opcode_benign_dataset_csv_file_path_x64 = os.path.join(root_dir, "benign_opcodes_x64.csv")

opcode_malware_dataset_csv_file_path_x86 = os.path.join(root_dir, "malware_opcodes_x86.csv")
opcode_malware_dataset_csv_file_path_x64 = os.path.join(root_dir, "malware_opcodes_x64.csv")

def init():
    maxInt = sys.maxsize

    while True:
        # decrease the maxInt value by factor 10
        # as long as the OverflowError occurs.

        try:
            csv.field_size_limit(maxInt)
            break
        except OverflowError:
            maxInt = int(maxInt / 10)

def generate_raw_dataset():

    if False:
        RawDatasetGenerator.generate(
            benign_scan_dirs,
            benign_scan_exts,
            raw_benign_dataset_dir,
            raw_dataset_csv_file_name,
            file_count_limit,
            file_size_limit,
            tmp_raw_file_path,
            tmp_filtered_file_path
        )

    if True:
        RawDatasetGenerator.generate(
            malware_scan_dir,
            malware_scan_exts,
            raw_malware_dataset_dir,
            raw_dataset_csv_file_name,
            file_count_limit,
            file_size_limit,
            tmp_raw_file_path,
            tmp_filtered_file_path
        )

    pass

def convert_raw_dataset_to_opcode_dataset():

    if True:
        for machine, output_csv_file_path in zip(
                                [0x14c, 0x8664],
                                [opcode_benign_dataset_csv_file_path_x86, opcode_benign_dataset_csv_file_path_x64]):
            paths = RawDatasetGenerator.load(raw_benign_dataset_dir, raw_dataset_csv_file_name, [machine], file_count_limit, file_size_limit)
            OpcodeDatasetGenerator.generate(paths, output_csv_file_path)

    if False:

        for machine, output_csv_file_path in zip(
                                [0x14c, 0x8664],
                                [opcode_malware_dataset_csv_file_path_x86, opcode_malware_dataset_csv_file_path_x64]):
            paths = RawDatasetGenerator.load(raw_malware_dataset_dir, raw_dataset_csv_file_name, [machine], file_count_limit, file_size_limit)
            OpcodeDatasetGenerator.generate(paths, output_csv_file_path)

    pass

def train_dataset():

    if True:
        benign_opcodes_dataset = OpcodeDatasetGenerator.load(opcode_benign_dataset_csv_file_path_x86, try_benign_file_count_limit)
        benign_op_freq = []
        for opcodes in benign_opcodes_dataset:
            if len(opcodes) == 0:
                continue
            benign_op_freq.append(FeatureExtractor.extract_frequency(opcodes))

        malware_opcodes_dataset = OpcodeDatasetGenerator.load(opcode_malware_dataset_csv_file_path_x86, try_malware_file_count_limit)
        malware_op_freq = []
        for opcodes in malware_opcodes_dataset:
            if len(opcodes) == 0:
                continue
            malware_op_freq.append(FeatureExtractor.extract_frequency(opcodes))

        print("n benign:", len(benign_op_freq))
        print("n malware:", len(malware_op_freq))

        data = benign_op_freq + malware_op_freq
        labels = [0 for x in benign_op_freq] + [1 for x in malware_op_freq]

        # init
        X_train, y_train, X_test, y_test, X_train_pca, X_test_pca = DataTrainer.init_train(data, labels, True)

        # train
        cross_predicts = DataTrainer.cross_train(X_train, y_train, X_test, X_train_pca, X_test_pca)

        # validate
        validations = DataTrainer.cross_validate(cross_predicts, y_test)

        # output
        classifiers = DataTrainer.get_classifiers()
        for classifier_name, validation in zip(classifiers, validations):
            print(classifier_name, validation)

        return

    pass

def test():
    data, labels = make_moons(noise=0.3, random_state=0)

    # init
    X_train, y_train, X_test, y_test, X_train_pca, X_test_pca = DataTrainer.init_train(data, labels, False)

    # train
    cross_predicts = DataTrainer.cross_train(X_train, y_train, X_test, X_train_pca, X_test_pca)

    # validate
    validations = DataTrainer.cross_validate(cross_predicts, y_test)

    # output
    classifiers = DataTrainer.get_classifiers()
    for classifier_name, validation in zip(classifiers, validations):
        print(classifier_name, validation)

    pass


if __name__ == '__main__':

    # test()

    init()

    if False:
        generate_raw_dataset()

    if False:
        convert_raw_dataset_to_opcode_dataset()

    if True:
        train_dataset()

    pass