using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WindowsFormsApp1.Controls;
using System.IO;

namespace WindowsFormsApp1.UserControls
{
    public partial class TrainingUserControl : UserControl
    {
        public TrainingUserControl()
        {
            InitializeComponent();
        }

        private readonly string[] FEATURE_VALUES = new string[]
        {
            "Term frequency",
            "Term Frequency–Inverse Document Frequency",
            "Page Rank"
        };

        private readonly string[] FEATURE_TYPE_VALUES = new string[]
        {
            "Linear",
            "Graph"
        };

        private readonly string[] TEST_RATIO_VALUES = new string[]
        {
            "10%",
            "20%",
            "30%",
            "40%",
            "50%",
            "60%",
            "70%",
            "80%",
            "90%"
        };

        protected override void OnLoad(EventArgs e)
        {
            // Benign formats
            //for (int iFormat = 0; iFormat < MiningUserControl.DATA_FORMAT_VALUES.Length; iFormat++)
            //    this.benignFormatComboBox.Items.Add(MiningUserControl.DATA_FORMAT_VALUES[iFormat]);
            this.benignFormatComboBox.Items.Add(MiningUserControl.DATA_FORMAT_VALUES[(int)MiningUserControl.DataFormatEnum.Graph]);
            this.benignFormatComboBox.SelectedIndex = 0;

            // Malware format
            //for (int iFormat = 0; iFormat < MiningUserControl.DATA_FORMAT_VALUES.Length; iFormat++)
            //    this.malwareFormatComboBox.Items.Add(MiningUserControl.DATA_FORMAT_VALUES[iFormat]);
            this.malwareFormatComboBox.Items.Add(MiningUserControl.DATA_FORMAT_VALUES[(int)MiningUserControl.DataFormatEnum.Graph]);
            this.malwareFormatComboBox.SelectedIndex = 0;

            // Feature
            for (int iFeature = 0; iFeature < FEATURE_VALUES.Length; iFeature++)
                this.featureComboBox.Items.Add(FEATURE_VALUES[iFeature]);
            this.featureComboBox.SelectedIndex = 0;

            // Feature type
            for (int iType = 0; iType < FEATURE_TYPE_VALUES.Length; iType++)
                this.featureTypeComboBox.Items.Add(FEATURE_TYPE_VALUES[iType]);
            this.featureTypeComboBox.SelectedIndex = 0;

            // Test ratio
            for (int iRatio = 0; iRatio < TEST_RATIO_VALUES.Length; iRatio++)
                this.testRatioComboBox.Items.Add(TEST_RATIO_VALUES[iRatio]);
            this.testRatioComboBox.SelectedIndex = 0;

#if DEBUG
            
#endif
        }

        private void benignLocationButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.SelectedPath))
                    this.benignLocationTextBox.Text = dialog.SelectedPath;
            }
        }

        private void malwareLocationButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                DialogResult result = dialog.ShowDialog();

                if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.SelectedPath))
                    this.malwareLocationTextBox.Text = dialog.SelectedPath;
            }
        }

        private void benignLoadButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (!Directory.Exists(this.benignLocationTextBox.Text))
                    throw new Exception("Not found: Benign location");

                if (!MiningUserControl.DATA_FORMAT_VALUES.Contains(this.benignFormatComboBox.SelectedItem))
                    throw new Exception("Invalid: Benign data format");

                //

            } catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void malwareLoadButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (!Directory.Exists(this.malwareLocationTextBox.Text))
                    throw new Exception("Not found: Malware location");

                if (!MiningUserControl.DATA_FORMAT_VALUES.Contains(this.malwareFormatComboBox.SelectedItem))
                    throw new Exception("Invalid: Malware data format");

                //

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void extractButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (!FEATURE_VALUES.Contains(this.featureComboBox.SelectedItem))
                    throw new Exception("Invalid: Feature");

                if (!FEATURE_TYPE_VALUES.Contains(this.featureTypeComboBox.SelectedItem))
                    throw new Exception("Invalid: Feature type");

                //

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void startButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (!TEST_RATIO_VALUES.Contains(this.testRatioComboBox.SelectedItem))
                    throw new Exception("Invalid: Test ratio");

                //

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void resultButton_Click(object sender, EventArgs e)
        {

        }

        private void saveButton_Click(object sender, EventArgs e)
        {

        }
    }
}
