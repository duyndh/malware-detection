using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using static WindowsFormsApp1.Controls.MiningUserControl;

namespace WindowsFormsApp1.Controllers
{
    public class AppController
    {
        public const string RESOURCE_DIR = "..\\..\\..\\..\\Resources";

        [DllImport(RESOURCE_DIR + "\\NativeLib.dll")]
        public extern static void Test();

        [DllImport(RESOURCE_DIR + "\\NativeLib.dll")]
        public extern static void Test1(string s);

        [DllImport(RESOURCE_DIR + "\\NativeLib.dll")]
        public extern static bool DisassemblyFile(string input_file_path, string asm_file_path, string output_file_path);

        public void StartMining(string srcLocation, DataFormatEnum srcFormat, string dstLocation, DataFormatEnum dstFormat, int dstCountLimit)
        {
            if (srcFormat == DataFormatEnum.Raw)
            {
                var inputPaths = Directory.EnumerateFiles(srcLocation, "*.*", SearchOption.AllDirectories).ToArray();
                foreach (var inputPath in inputPaths)
                {                    
                    var outputName = Regex.Replace(inputPath, "[^a-zA-Z0-9]+", "_") + ".csv";
                    var outputPath = Path.Combine(dstLocation, outputName);
                    bool result = DisassemblyFile(inputPath, "", outputPath);
                    continue;
                }
            }
            else if (srcFormat == DataFormatEnum.Assembly)
            {
                var inputPaths = Directory.EnumerateFiles(srcLocation, "*.asm*", SearchOption.AllDirectories).ToArray();
                foreach (var inputPath in inputPaths)
                {
                    var bytesPath = Path.ChangeExtension(inputPath, ".bytes");
                    if (!File.Exists(bytesPath))
                        continue;

                    var outputName = Regex.Replace(inputPath, "[^a-zA-Z0-9]+", "_") + ".csv";
                    var outputPath = Path.Combine(dstLocation, outputName);                    
                    DisassemblyFile(bytesPath, inputPath, outputPath);
                }
            }

            return;
        }
    }
}
