import glob
import os

from dataset_loader import *
from feature_extractor import *


def load_graphs_from_directory(directory, limit_count):

    print("loading graphs...")
    find_pattern = os.path.join(directory, "**", "*.gcsv")
    file_paths = glob.glob(find_pattern, recursive=True)
    file_count = min(len(file_paths), limit_count)
    print("total:", file_count)

    file_index = 1
    graphs = []
    for file_path in file_paths:

        if file_index > limit_count:
            break

        print(file_index, "/", file_count, file_path)

        graphs.append(DatasetLoader.load_graph_file(file_path))
        file_index += 1

    return graphs


def build_dataset_features(method, sequence_length, directory, limit_count):

    graphs = load_graphs_from_directory(directory, limit_count)
    features = FeatureExtractor.extract_feature(method, graphs, OPCODE_RANGE, sequence_length)

    return


if __name__ == '__main__':

    build_dataset_features(FeatureMethod.PR, 1, "c:\\temp\\graphs", 100)

    pass
