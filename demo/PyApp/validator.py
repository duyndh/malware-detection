import os

import joblib
from sklearn.neighbors import KNeighborsClassifier

from const_container import *
from utils import *
from trainer import *


class Validator:

    @staticmethod
    def test_model(classifier_ids, X, y):

        scaler = joblib.load(open("{0}\\{1}".format(
            GlobalVars.output_dir,
            "data.scl"),
            "rb"))

        decomp_path = "{0}\\{1}".format(
            GlobalVars.output_dir,
            "data.dcp")
        if os.path.exists(decomp_path):
            decomp = joblib.load(open(decomp_path, "rb"))
        else:
            decomp = None

        extra_path = "{0}\\{1}".format(
            GlobalVars.output_dir,
            "data.ext")
        if os.path.exists(extra_path):
            extra_data_with_count = joblib.load(open(extra_path, "rb"))
        else:
            extra_data_with_count = None

        for classifier_id in classifier_ids:
            try:

                classifier_name = ClassifierEnum.get_name(classifier_id)
                log("test model: " + classifier_name)

                # load and transform
                classifier = joblib.load(open("{0}\\{1}_{2}{3}".format(
                    GlobalVars.output_dir,
                    classifier_id,
                    classifier_name,
                    ".mdl"),
                    "rb"))

                # extract feature
                X_test, _ = FeatureExtractor.extract_feature(
                    GlobalVars.feature_id, X, OPCODE_RANGE, GlobalVars.sequence_len, extra_data_with_count
                )
                y_test = y

                # init
                _, _, X_test, y_test, scaler, decomp = Trainer.init_training(None, None, X_test, y_test, scaler, decomp)

                # predict
                raw_predicts = classifier.predict(X_test)
                y_pred = np.stack([(1 if int(round(x)) > 0 else 0) for x in raw_predicts], axis=0)

                log("\n" + classification_report(y_test, y_pred))

            except Exception as e:
                log("ERROR: " + str(e))

