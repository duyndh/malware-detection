import enum

OPCODE_RANGE = (256 + 1 + 14)


class FeatureEnum(enum.Enum):
    TF = 0
    TF_IDF = 1
    PR = 2

    @classmethod
    def get_index(cls, type):
        return list(cls).index(type)

    @classmethod
    def get_name(cls, index):
        names = [
            "TF",
            "TF-IDF",
            "PR"
        ]
        return names[index]


class ClassifierEnum(enum.Enum):
    KNN = 0,
    RBF_SVM = 1,
    Logistic_Regression = 2,
    Neuron_Network = 3,
    Naive_Bayes = 4,
    QDA = 5,
    LDA = 6,
    Decision_Tree = 7,
    Random_Forest = 8,
    Extra_Trees = 9,
    Ada_Boost = 10,
    Gradient_Boosting = 11

    @classmethod
    def get_index(cls, type):
        return list(cls).index(type)

    @classmethod
    def get_name(cls, index):
        names = [
            "KNN",
            "RBF SVM",
            "Logistic Regression",
            "Neural Net",
            "Naive Bayes",
            "QDA",
            "LDA",
            "Decision Tree",
            "Random Forest",
            "Extra Trees",
            "AdaBoost",
            "Gradient Boosting"
        ]
        return names[index]


class GlobalVars:

    feature_id = FeatureEnum.get_index(FeatureEnum.TF_IDF)
    sequence_len = 1
    test_ratio = 0.2
    reduced_size = OPCODE_RANGE
    benign_dirs = ["c:\\x\\a", "c:\\x\\b", "c:\\x\\c", "c:\\x\\d", "c:\\x\\e", "c:\\x\\f"]  # ["c:\\x\\e", "c:\\x\\f"]
    benign_limit = 10 * pow(10, 0)
    malware_dirs = ["c:\\y\\y"]  # ["c:\\y\\y", "c:\\y\\yx"]
    malware_limit = 12 * pow(10, 0)
    classifier_ids = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    output_dir = "c:\\temp\\output"

    benign_val_dirs = None  #["c:\\x\\b", "c:\\x\\c", "c:\\x\\d"]
    benign_val_limit = 5 * pow(10, 0)
    malware_val_dirs = ["c:\\y\\yx"]
    malware_val_limit = 5 * pow(10, 0)

    prefix_file_name = None
