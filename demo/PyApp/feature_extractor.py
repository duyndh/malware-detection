import math
import sys

import numpy as np
from const_container import *


class FeatureExtractor:

    @staticmethod
    def calculate_frequencies(graph, value_range, sequence_length, output_linear_array):

        frequencies = np.zeros(pow(value_range, sequence_length), np.int)

        for node in graph:

            current_opcode = node[0]
            current_nexts = node[4]

            if sequence_length == 1:
                frequencies[current_opcode] += 1
            elif sequence_length == 2:
                base_index = current_opcode * value_range
                for next_id in current_nexts:
                    next_node = graph[next_id]
                    next_opcode = next_node[0]
                    frequencies[base_index + next_opcode] += 1
            else:
                pass

        if output_linear_array:
            return frequencies
        else:
            return frequencies.reshape(tuple([value_range for i in range(sequence_length)]))

    @staticmethod
    def extract_frequencies(graphs, value_range, sequence_length, output_linear_array):

        dataset_frequencies = []
        for graph in graphs:
            frequencies = FeatureExtractor.calculate_frequencies(graph, value_range, sequence_length,
                                                                 output_linear_array)
            dataset_frequencies.append(frequencies)

        return dataset_frequencies

    @staticmethod
    def extract_tfs(dataset_frequencies):

        dataset_tfs = []
        for frequencies in dataset_frequencies:
            max_frequency = max(frequencies)
            dataset_tfs.append(np.array([(0.5 + (0.5 * frequency) / (1 + max_frequency)) for frequency in frequencies]))

        return dataset_tfs, None

    @staticmethod
    def extract_appeared_counts(dataset_frequencies):

        dataset_appeared_counts = np.zeros(len(dataset_frequencies[0]), np.int)
        for frequencies in dataset_frequencies:
            for index in range(len(frequencies)):
                if frequencies[index] > 0:
                    dataset_appeared_counts[index] += 1

        return dataset_appeared_counts

    @staticmethod
    def extract_idfs(appeared_counts, dataset_samples_count):

        dataset_idfs = []
        for count in appeared_counts:
            dataset_idfs.append(math.log(dataset_samples_count * 1.0 / (1 + count)))

        return dataset_idfs

    @staticmethod
    def extract_tf_idfs(dataset_frequencies, extra_data=None):
        if extra_data is None:
            return FeatureExtractor.extract_tf_idf_seen(dataset_frequencies)
        else:
            dataset_appeared_counts, dataset_samples_count = extra_data
            dataset_tf_idfs = []
            for frequencies in dataset_frequencies:
                dataset_tf_idfs.append(FeatureExtractor.extract_tf_idf_unseen(
                    dataset_appeared_counts, dataset_samples_count, frequencies)
                )
            return dataset_tf_idfs, None

    @staticmethod
    def extract_tf_idf_seen(dataset_frequencies):
        dataset_tfs, _ = FeatureExtractor.extract_tfs(dataset_frequencies)
        dataset_appeared_counts = FeatureExtractor.extract_appeared_counts(dataset_frequencies)
        dataset_idfs = FeatureExtractor.extract_idfs(dataset_appeared_counts, len(dataset_frequencies))

        dataset_tf_idfs = []
        for tfs in dataset_tfs:

            tf_idfs = []
            for index in range(len(tfs)):
                tf_idfs.append(tfs[index] * dataset_idfs[index])

            dataset_tf_idfs.append(tf_idfs)

        return dataset_tf_idfs, dataset_appeared_counts

    @staticmethod
    def extract_tf_idf_unseen(dataset_appeared_counts, dataset_samples_count, frequencies):

        # re calculate counts
        for index in range(len(frequencies)):
            if frequencies[index] > 0:
                dataset_appeared_counts[index] += 1

        tfss, _ = FeatureExtractor.extract_tfs([frequencies])
        tfs = tfss[0]
        dataset_idfs = FeatureExtractor.extract_idfs(dataset_appeared_counts, dataset_samples_count + 1)

        tf_idfs = []
        for index in range(len(tfs)):
            tf_idfs.append(tfs[index] * dataset_idfs[index])

        # restore
        for index in range(len(frequencies)):
            if frequencies[index] > 0:
                dataset_appeared_counts[index] -= 1

        return tf_idfs

    @staticmethod
    def internal_pagerank(M, num_iterations: int = 100, d: float = 0.85):
        N = M.shape[1]
        v = np.random.rand(N, 1)
        v = v / np.linalg.norm(v, 1)
        M_hat = (d * M + (1 - d) / N)
        for i in range(num_iterations):
            v = M_hat @ v
        return v

    @staticmethod
    def extract_pagerank(dataset_frequencies_2d):

        dataset_page_ranks = []
        page_count = len(dataset_frequencies_2d[0])

        for frequencies_2d in dataset_frequencies_2d:

            weights = np.zeros((page_count, page_count), np.float)
            for src_id in range(page_count):

                from_src_count = sum([frequencies_2d[src_id][dst_id] for dst_id in range(page_count)])
                for dst_id in range(page_count):

                    if from_src_count > 0:
                        weights[src_id][dst_id] = frequencies_2d[src_id][dst_id] * 1.0 / from_src_count
                    else:
                        weights[src_id][dst_id] = 1.0 / page_count

            weights = weights.transpose()
            page_ranks = FeatureExtractor.internal_pagerank(weights).reshape(-1)

            dataset_page_ranks.append(page_ranks)

        return dataset_page_ranks, None

    @staticmethod
    def extract_feature(feature_id, graphs, value_range, sequence_length, extra_data):

        if feature_id == FeatureEnum.get_index(FeatureEnum.TF):
            dataset_frequencies = FeatureExtractor.extract_frequencies(graphs, value_range, sequence_length, True)
            return FeatureExtractor.extract_tfs(dataset_frequencies)
        elif feature_id == FeatureEnum.get_index(FeatureEnum.TF_IDF):
            dataset_frequencies = FeatureExtractor.extract_frequencies(graphs, value_range, sequence_length, True)
            return FeatureExtractor.extract_tf_idfs(dataset_frequencies, extra_data)
        elif feature_id == FeatureEnum.get_index(FeatureEnum.PR):
            dataset_frequencies = FeatureExtractor.extract_frequencies(graphs, value_range, 2, False)
            return FeatureExtractor.extract_pagerank(dataset_frequencies)
        else:
            return None

