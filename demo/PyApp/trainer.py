from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.preprocessing import StandardScaler

from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.cluster import KMeans
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import ExtraTreesClassifier

from sklearn.decomposition import PCA
from sklearn.metrics import classification_report
import joblib

import numpy as np
import enum
import matplotlib.pyplot as plt
from sklearn.metrics import auc
from sklearn.metrics import plot_roc_curve

from const_container import ClassifierEnum
from utils import *

class Trainer:

    @staticmethod
    def get_classifier(classifier_id):

        if classifier_id == ClassifierEnum.get_index(ClassifierEnum.KNN):
            return KNeighborsClassifier(3)
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.Linear_SVM):
            return SVC(kernel="linear", C=0.025)
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.RBF_SVM):
            return SVC(gamma=2, C=1)
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.Linear_Regression):
            return LinearRegression()
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.Logistic_Regression):
            return LogisticRegression(random_state=0, max_iter=1000)
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.Neuron_Network):
            return MLPClassifier(alpha=1, max_iter=1000)
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.Naive_Bayes):
            return GaussianNB()
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.QDA):
            return QuadraticDiscriminantAnalysis()
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.LDA):
            return LinearDiscriminantAnalysis()
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.Decision_Tree):
            return DecisionTreeClassifier(max_depth=5)
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.Random_Forest):
            return RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.Extra_Trees):
            return ExtraTreesClassifier(n_estimators=100, random_state=0)
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.Ada_Boost):
            return AdaBoostClassifier()
        elif classifier_id == ClassifierEnum.get_index(ClassifierEnum.Gradient_Boosting):
            return GradientBoostingClassifier(random_state=0)
        else:
            return None

    @staticmethod
    def reduce_dataset_dimension(X_train, X_test, reduced_size):

        if len(X_train[0]) > reduced_size:
            print("reducing dimension to", reduced_size)
            pca = PCA(n_components=reduced_size)
            X_train_pca = pca.fit_transform(X_train)
            X_test_pca = pca.transform(X_test)
        else:
            X_train_pca = X_train
            X_test_pca = X_test

        print("reduced feature size=", len(X_train_pca[0]))

        return X_train_pca, X_test_pca

    @staticmethod
    def init_report_train(X, y, test_ratio, reduced_size):

        print("Initializing")

        sc = StandardScaler()

        # split to train and test set
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_ratio, random_state=42)

        # normalize
        X_train = sc.fit_transform(X_train)
        X_test = sc.transform(X_test)

        # reduce
        X_train, X_test = Trainer.reduce_dataset_dimension(X_train, X_test, reduced_size)

        # return
        return X_train, y_train, X_test, y_test

    @staticmethod
    def train_report(classifier_id, X_train, y_train, X_test, y_test, output_file_path):

        print("Report training:", ClassifierEnum.get_name(classifier_id))
        classifier = Trainer.get_classifier(classifier_id)

        # fit model
        classifier.fit(X_train, y_train)

        # predict
        raw_predicts = classifier.predict(X_test)
        y_pred = np.stack([(1 if int(round(x)) > 0 else 0) for x in raw_predicts], axis=0)

        append_to_file(output_file_path, "\n" + ClassifierEnum.get_name(classifier_id) + "\n" + classification_report(y_test, y_pred) + "\n")

    @staticmethod
    def train_k_fold(classifier_name, classifier, X, y):
        cv = StratifiedKFold(n_splits=10)
        tprs = []
        aucs = []
        mean_fpr = np.linspace(0, 1, 100)

        fig, ax = plt.subplots()
        for i, (train, test) in enumerate(cv.split(X, y)):
            X_train = X[train]
            X_test = X[test]
            y_train = y[train]
            y_test = y[test]
            classifier.fit(X_train, y_train)
            viz = plot_roc_curve(classifier, X_test, y_test, name='ROC fold {}'.format(i), alpha=0.3, lw=1, ax=ax)
            interp_tpr = np.interp(mean_fpr, viz.fpr, viz.tpr)
            interp_tpr[0] = 0.0
            tprs.append(interp_tpr)
            aucs.append(viz.roc_auc)

        ax.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r', label='Chance', alpha=.8)

        mean_tpr = np.mean(tprs, axis=0)
        mean_tpr[-1] = 1.0
        mean_auc = auc(mean_fpr, mean_tpr)
        std_auc = np.std(aucs)
        ax.plot(mean_fpr, mean_tpr, color='b', label=r'Mean ROC (AUC = %0.2f $\pm$ %0.2f)' % (mean_auc, std_auc), lw=2,
                alpha=.8)

        std_tpr = np.std(tprs, axis=0)
        tprs_upper = np.minimum(mean_tpr + std_tpr, 1)
        tprs_lower = np.maximum(mean_tpr - std_tpr, 0)
        ax.fill_between(mean_fpr, tprs_lower, tprs_upper, color='grey', alpha=.2, label=r'$\pm$ 1 std. dev.')

        ax.set(xlim=[-0.05, 1.05], ylim=[-0.05, 1.05], title=classifier_name)
        ax.legend(loc="lower right")
        plt.show()
