#include "pch.h"

#include "Wrapper.h"
#include "Disassembler.h"
#include "GraphBuilder.h"

void WINAPI Test()
{
	MessageBoxA(NULL, "Test", NULL, MB_OK);
}

void WINAPI Test1(LPSTR str)
{
	MessageBoxA(NULL, str, NULL, MB_OK);
}

bool WINAPI DisassemblyFile(LPSTR input_file_path, LPSTR asm_file_path, LPSTR output_file_path)
{
	Disassembler disassembler;
	if (disassembler.Disassembly(input_file_path, asm_file_path))
	{
		disassembler.Export(output_file_path);
		return true;
	}
	else
		return false;
}

bool WINAPI BuildInstructionsGraph(LPSTR input_file_path, LPSTR output_file_path)
{
	GraphBuilder graphBuilder;
	if (graphBuilder.LoadInstructions(input_file_path))
	{
		graphBuilder.BuildGraph();
		graphBuilder.Export(output_file_path);
		return true;
	}
	else
		return false;
}

bool WINAPI BuildGraphFromFile(LPSTR input_file_path, LPSTR asm_file_path, LPSTR output_file_path)
{
	std::string guid = Wrapper::GenerateRandomGuid();

	CHAR temp_sz[MAX_PATH];
	ExpandEnvironmentStringsA("%TEMP%", temp_sz, _countof(temp_sz));

	std::string tmp_file_path = temp_sz;
	tmp_file_path += "\\";
	tmp_file_path += guid;

	// Disassembly
	if (DisassemblyFile(input_file_path, asm_file_path, (LPSTR)tmp_file_path.c_str()))
	{
		// Build graph
		bool result = BuildInstructionsGraph((LPSTR)tmp_file_path.c_str(), output_file_path);

		// Remove temp file
		DeleteFileA(tmp_file_path.c_str());
		return result;
	}
	else
		return false;
}