#include "pch.h"
#include "Wrapper.h"

bool Wrapper::ReadFileData(const std::string& file_path_str, std::vector<BYTE>& file_data)
{
	if (!PathFileExistsA(file_path_str.c_str()))
		return false;
	
	// open file
	std::ifstream file_stream(file_path_str, std::ios::binary | std::ifstream::ate);

	// get file size
	std::streamsize file_size = file_stream.tellg();
	file_stream.seekg(0, std::ios::beg);

	// reserve
	file_data.resize(file_size);

	// read
	file_stream.read((LPSTR)file_data.data(), file_size);

	// clean up
	file_stream.close();

	return true;
}

void Wrapper::WriteFileData(const std::string& file_path_str, const std::vector<BYTE>& file_data)
{
	// open file
	std::ofstream file_stream(file_path_str, std::ios::binary);

	file_stream.write((LPSTR)file_data.data(), file_data.size());
	
	// clean up
	file_stream.close();
}

std::list<std::string> Wrapper::Split(const std::string& line_str, const std::string& delims, bool alphanum, bool accept_empty_parts)
{
	std::list<std::string> parts;
	std::set<char> delim_set = { ' ', '\t', ',' };
	if (alphanum)
	{
		delim_set.clear();
		for (WORD c = 0; c < 256; c++)
		{
			if (!std::isalnum(c))
			{
				delim_set.insert(c);
			}
		}
	}
	else if (delims.length())
	{
		delim_set.clear();
		delim_set.insert(delims.begin(), delims.end());
	}

	for (size_t index = 0; index < line_str.length(); index++)
	{
		if (delim_set.find(line_str[index]) == delim_set.end())
		{
			size_t delim_index = index + 1;
			for (; delim_index < line_str.length(); delim_index++)
			{
				if (delim_set.find(line_str[delim_index]) != delim_set.end())
					break;
			}
			parts.push_back(line_str.substr(index, delim_index - index));

			index = delim_index;
		}
		else if (accept_empty_parts)
			parts.push_back("");
	}

	return parts;
}

bool Wrapper::CheckHexString(const std::string& str, bool case_sensitive)
{
	bool is_hex_str = true;
	for (char c : str)
	{
		if (!case_sensitive)
			c = std::toupper(c);

		if ((c < '0' || c > '9') && (c < 'A' || c > 'F'))
		{
			is_hex_str = false;
			break;
		}
	}
	return is_hex_str;
}

