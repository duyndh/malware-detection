#pragma once
#include "pch.h"

class Disassembler
{
private:
	bool InternalDisassembly();
	bool GetCodeSectionDataFromPe();
	bool GetMetaDataFromAsm(const std::string& asm_file_path_str);
	bool GetTextSectionInfoFromAsm(const std::vector<std::string>& lines, DWORD64& virtual_address, DWORD& virtual_size);
	bool GetCodeSectionDataFromAsm(const std::string& asm_file_path_str);
	bool GetCodeFromBytes(const std::string& bytes_file_path_str);
	
	csh m_cs_handle = NULL;
	std::vector<BYTE> m_pe_file_data;
	
	std::list<std::tuple<
		DWORD64,
		BYTE,
		std::string,
		std::list<BYTE>,
		std::list<DWORD64>,
		std::list<BYTE>
		>> m_instructions;

	
	enum MachineType
	{
		MachineType_UNKNOWN,
		MachineType_X86,
		MachineType_X64
	};
	DWORD64 m_image_base = 0;
	DWORD64 m_code_section_virtual_address = 0;
	
	DWORD64 m_shellcode_virtual_address_in_pe_file = 0;
	DWORD m_shellcode_size = 0;
	
public:
	Disassembler();
	~Disassembler();
	
	bool Disassembly(const std::string& input_file_path_str, const std::string& asm_file_path_str);
	void Export(const std::string output_file_path_str);
	
};

